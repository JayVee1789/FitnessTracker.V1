@inject IJSRuntime JS
@implements IAsyncDisposable

<Router AppAssembly="@typeof(App).Assembly">
    <Found Context="routeData">
        <RouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)" />
    </Found>
    <NotFound>
        <LayoutView Layout="@typeof(MainLayout)">
            <p>Page introuvable.</p>
        </LayoutView>
    </NotFound>
</Router>

@if (updateAvailable)
{
    <div class="alert alert-warning fixed-bottom text-center">
        🔄 Nouvelle version disponible.
        <button class="btn btn-sm btn-primary ms-2" @onclick="ReloadApp">Recharger</button>
    </div>
}

@code {
    private bool updateAvailable = false;
    private DotNetObjectReference<App>? dotRef;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            dotRef = DotNetObjectReference.Create(this);
            await JS.InvokeVoidAsync("listenForServiceWorkerUpdates", dotRef);
        }
    }


    [JSInvokable]
    public void NotifyUpdateAvailable()
    {
        if (!updateAvailable)
        {
            updateAvailable = true;
            StateHasChanged();
        }
    }

    private async Task ReloadApp()
    {
        updateAvailable = false;
        StateHasChanged(); // Cache la bannière immédiatement
        await JS.InvokeVoidAsync("forceFullReload");
    }


    public async ValueTask DisposeAsync()
    {
        dotRef?.Dispose();
    }
}
