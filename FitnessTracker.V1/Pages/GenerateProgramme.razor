@page "/generate-programme"
@using FitnessTracker.V1.Models

@inject ProgrammeGeneratorService Generator
@inject HttpClient Http
@inject SupabaseService2 SupabaseService
@inject NavigationManager Nav
@inject AuthService AuthService
@inject Supabase.Client Supabase
@inject ProfileService profileService

<h3>Programme généré</h3>

@if (plan == null)
{
    <p><em>Chargement du programme...</em></p>
}
else
{
    @foreach (var week in plan.Weeks)
    {
        <div class="card my-3">
            <div class="card-header bg-primary text-white">
                <strong>Semaine @week.WeekNumber</strong> — Charge: @week.ChargeIncrementPercent%
            </div>
            <div class="card-body">
                <p>
                    <strong>Séries:</strong> @week.SeriesWeek |
                    <strong>Reps:</strong> @week.RepetitionsWeek |
                    <strong>Repos:</strong> @week.RestTimeWeek s
                </p>

                @foreach (var day in week.Days.OrderBy(d => d.DayIndex))
                {
                    <div class="mb-3">
                        <h5>Jour @day.DayIndex - @day.TypeProgramme</h5>
                        @if (day.IsRest)
                        {
                            <em>Repos</em>
                        }
                        else
                        {
                            <ul>
                                @foreach (var ex in day.Exercises)
                                {
                                    <li>
                                        <strong>@ex.ExerciseName</strong>
                                        <small>
                                            (@ex.Series x @ex.Repetitions | @ex.RestTimeSeconds s | @ex.Pourcentage1RM% 1RM
                                            @(ex.IsSuperset ? "| Superset" : ""))
                                        </small>
                                    </li>
                                }
                            </ul>
                        }
                    </div>
                }
            </div>
        </div>
    }
    <button class="btn btn-primary mt-3" @onclick="() => EnregistrerProgrammeAsync(plan)">
        Enregistrer ce programme
    </button>
}

@code {
    private WorkoutPlan? plan;
    private List<ExerciseDefinition> exerciseList = new();
    protected override void OnInitialized()
    {
        Console.WriteLine("🔥 OnInitialized() appelé");
    }
    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("🛠️ OnInitializedAsync lancé");
        // var user = Supabase.Auth.CurrentUser;
        // if (user is null)
        // {
        //     Console.WriteLine("❌ Utilisateur non connecté, redirection");
        //     Nav.NavigateTo("/login");
        //     return;
        // }
        // var exos = new List<ExerciseDefinition>
        // {
        //     new() { Id = 1, Name = "Bench Press", Category = "Chest", Equipment = "Barbell", Description = "Compound" },
        //     new() { Id = 2, Name = "Pull-Up", Category = "Back", Equipment = "Body Weight", Description = "Compound" },
        //     new() { Id = 3, Name = "Squat", Category = "Legs", Equipment = "Barbell", Description = "Compound" },
        //     new() { Id = 4, Name = "Overhead Press", Category = "Shoulders", Equipment = "Dumbbell", Description = "Compound" },
        //     new() { Id = 5, Name = "Barbell Curl", Category = "Biceps", Equipment = "Barbell", Description = "Single-Joint" },
        //     new() { Id = 6, Name = "Triceps Dips", Category = "Triceps", Equipment = "Body Weight", Description = "Single-Joint" }
        // };

        //json
        // Charger les exercices depuis le fichier JSON
        try{
            exerciseList = await Http.GetFromJsonAsync<List<ExerciseDefinition>>("data/ExercicesListeLocal.json")
                                  ?? new();
        }catch(Exception ex)
        {
            Console.WriteLine(  ex);
            Console.WriteLine("Erreur chargement JSON exercices : " + ex.Message);
        }
        

        // var profile = new UserProfile
        //     {
        //         Age = 28,
        //         Level = UserLevel.Intermediaire,
        //         Objective = TrainingObjective.Hypertrophy,
        //         SeancesPerWeek = 3,
        //         ProgramDurationMonths = 1,
        //         WantsSuperset = false,
        //         BodyweightOnly = false,
        //         PathologieMuscle = "",
        //         PriorityMuscle = ""
        //     };

         var profile = await profileService.GetOrCreateUserProfileAsync();
       

        plan = Generator.Generate("TBT", profile, exerciseList);
    }

    private async Task EnregistrerProgrammeAsync(WorkoutPlan plan)
    {
        
        if (!AuthService.IsAuthenticated)
        {
            Nav.NavigateTo("/login");
            return;
        }
       

        var model = new ProgrammeModel
            {
                Id = Guid.NewGuid(),
                Nom = "Programme TBT généré",
                DateDebut = DateTime.Today,
                Contenu = JsonSerializer.Serialize(plan)
               
            };

        bool ok = await SupabaseService.SaveProgrammeAsync(model, isManual: false);
        if (ok)
        {
            Console.WriteLine("✅ Programme généré enregistré dans Supabase");
            Nav.NavigateTo("/view-session");
        }
    }
}
