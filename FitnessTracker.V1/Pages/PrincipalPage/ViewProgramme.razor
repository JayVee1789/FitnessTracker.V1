@page "/view-prog"
@using FitnessTracker.V1.Models
@inject NavigationManager Nav
@inject FitnessTracker.V1.Services.SupabaseService2 SupabaseService
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject FitnessTracker.V1.Services.Gamification.GamificationManager Gamification

<div class="mobile-container">

    @if (Gamification?.State != null)
    {
        <div class="progress-container">
            <span>Niveau @Gamification.State.Level</span>
            <div class="progress-bar">
                <div class="progress-fill" style="width:@((Gamification.State.TotalXP % 1000) / 10)%"></div>
            </div>
            <span class="trophy-icon">🏆</span>
        </div>
    }

    <h2 class="session-header">Vos Programmes</h2>

    @if (Programmes.Count == 0)
    {
        <div class="alert alert-light text-center mt-5">
            😕 Aucun programme trouvé.<br />
            Créez-en un pour commencer votre transformation !
        </div>
    }
    else
    {
        <div class="d-flex flex-column gap-3">
            @foreach (var prog in Programmes)
            {
                var plan = JsonSerializer.Deserialize<FitnessTracker.V1.Models.Model.WorkoutPlan>(prog.Contenu);
                var seancesCompletes = SeancesCompletes.Where(s => s.StartsWith(prog.Id.ToString())).ToList();
                int totalSeances = (plan?.TotalWeeks ?? 0) * 7;

                <div class="cartoon-card position-relative prog-clickable" @onclick="() => LancerSeance(prog.Id)">
                    <button class="cartoon-delete-btn position-absolute end-0 top-0 m-2"
                            @onclick="@(e => OnSupprimerProgramme(prog))"
                    @onclick:stopPropagation>
                        🗑️
                    </button>

                    <div class="cartoon-header">🏋️</div>

                    <div class="cartoon-title">@prog.Nom</div>

                    <div class="cartoon-bubbles">
                        <span class="bubble">📅 @prog.DateDebut.ToShortDateString()</span>
                        <span class="bubble">📆 @plan?.TotalWeeks sem.</span>
                        <span class="bubble">🎯 @totalSeances séances</span>
                        <span class="bubble">✅ @seancesCompletes.Count / @totalSeances</span>
                    </div>
                </div>
            }
        </div>

    }
</div>

@code {
    private List<ProgrammeModel> Programmes = new();
    private List<string> SeancesCompletes = new();

    protected override async Task OnInitializedAsync()
    {
        Programmes = await SupabaseService.GetAllProgrammesForCurrentUserAsync();
        var data = await LocalStorage.GetItemAsync<string>("seancesCompletes");
        if (!string.IsNullOrEmpty(data))
            SeancesCompletes = data.Split(',').ToList();
        await Gamification.InitializeAsync();
    }

    private async Task LancerSeance(Guid programmeId)
    {
        try
        {
            await LocalStorage.SetItemAsync("selectedProgrammeId", programmeId);
            Nav.NavigateTo("/view-seance", true);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
    }

    private async Task OnSupprimerProgramme(ProgrammeModel prog)
    {
        await SupabaseService.DeleteProgrammeUnifiedAsync(prog.Id, prog.Source);
        await LocalStorage.RemoveItemAsync($"programme_{prog.Id}");
        Programmes.Remove(prog);
        StateHasChanged();
    }
}
