@page "/view-prog"
@using FitnessTracker.V1.Models
@using FitnessTracker.V1.Models.Gamification
@using FitnessTracker.V1.Services.Data
@inject NavigationManager Nav
@inject SupabaseService2 SupabaseService
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject FitnessTracker.V1.Models.AppState appState


@inject GamificationDbService GamificationDbService
@* <div class="mobile-container"> *@
@* 
    <div class="greeting-section">
        <div class="greeting-text">Salut 👋</div>
        <div class="greeting-subtext">Prêt pour ton entraînement ?</div>
    </div> *@
<FitnessTracker.V1.Components.PagePrincipal.HeaderDuolingo/>
<div class="section-container">
    <div class="section-title">📚 Mes Programmes</div>
</div>

@if (Programmes.Count == 0)
{
    <div class="empty-state">
        <div class="empty-icon">😕</div>
        <div class="empty-title">Aucun programme</div>
        <div class="empty-text">
            Crée ton premier programme pour commencer ta progression !
        </div>
    </div>
}
else
{
    <div class="programs-grid">
        @foreach (var prog in Programmes)
        {
            var plan = JsonSerializer.Deserialize<FitnessTracker.V1.Models.Model.WorkoutPlan>(prog.Contenu);
            var seancesCompletes = SeancesCompletes.Where(s => s.StartsWith(prog.Id.ToString())).ToList();
            int totalSeances = (plan?.TotalWeeks ?? 0) * 7;
            double progressPercent = totalSeances > 0 ? (double)seancesCompletes.Count / totalSeances * 100 : 0;
            var datedebutformate = prog.DateDebut.ToString("d");




            <div class="program-card" @onclick="@(() => LancerSeance(prog.Id))">
                    <button class="delete-btn"
                            @onclick="@(() => OnSupprimerProgramme(prog))"
                    @onclick:stopPropagation>
                        🗑️
                    </button>

                    <div class="card-header strength">💪</div>
                    <div class="card-title">@prog.Nom</div>

                    <div class="card-stats">




                    <span class="stat-bubble">📅 @datedebutformate</span>
                        <span class="stat-bubble">📆 @(plan?.TotalWeeks ?? 0) sem.</span>
                        <span class="stat-bubble">🎯 @totalSeances séances</span>
                    </div>

                    <div class="progress-section">
                        <div class="progress-text">@seancesCompletes.Count/@totalSeances terminées</div>
                        <div class="progress-bar-container">
                            <div class="progress-bar-fill" style="width:@(progressPercent)%"></div>
                        </div>
                    </div>
                </div>
            }
        </div>
    }

<button class="floating-add" @onclick="@(() => Nav.NavigateTo("/choix-programme"))">+</button>
@* </div> *@

@code {
    private List<ProgrammeModel> Programmes = new();
    private List<string> SeancesCompletes = new();
    private GamificationDbModel? Gamification;

    protected override async Task OnInitializedAsync()
    {

        var restored = await SupabaseService.LoadSessionAsync();
        Console.WriteLine($"🟢 Session restaurée : {restored}");
        if (!restored)
        {
            Console.WriteLine("❌ Session non restaurée ➡️ Redirection vers connexion");
            Nav.NavigateTo("/login");
            return;
        }

        var userId = SupabaseService.GetCurrentUserId();
        if (string.IsNullOrEmpty(userId))
        {
            Console.WriteLine("❌ Aucun userId ➡️ redirection");
            Nav.NavigateTo("/login");
            return;
        }
        Console.WriteLine($"🟣 UserID récupéré : {userId}");
       
        Gamification = appState.Gamification;

        if (Gamification == null)
        {
            Gamification = await GamificationDbService.GetOrCreateGamificationAsync();
            appState.Gamification = Gamification;
        }



       
        Programmes = await SupabaseService.GetAllProgrammesForCurrentUserAsync();
        var data = await LocalStorage.GetItemAsync<string>("seancesCompletes");
        if (!string.IsNullOrEmpty(data))
            SeancesCompletes = data.Split(',').ToList();
    }

    private async Task LancerSeance(Guid programmeId)
    {
        await LocalStorage.SetItemAsync("selectedProgrammeId", programmeId);
       
        Nav.NavigateTo("/view-seance");
    }

    private async Task OnSupprimerProgramme(ProgrammeModel prog)
    {
        await SupabaseService.DeleteProgrammeUnifiedAsync(prog.Id, prog.Source);
        await LocalStorage.RemoveItemAsync($"programme_{prog.Id}");
        Programmes.Remove(prog);
        StateHasChanged();
    }
}
