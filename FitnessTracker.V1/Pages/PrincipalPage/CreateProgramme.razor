@page "/create-programme"
@inject HttpClient Http
@inject ILocalStorageService LocalStorage
@inject SupabaseService2 SupabaseService
@inject NavigationManager Nav
@using System.Text.Json
@using Blazored.LocalStorage
@using FitnessTracker.V1.Models.Enumeration
@using FitnessTracker.V1.Services.Data
@using static FitnessTracker.V1.Models.Model

<style>
    .input-label {
        color: white;
        font-weight: 700;
        margin-top: 0.5rem;
    }

    .filter-box {
        background: white;
        border-radius: 20px;
        padding: 1rem;
        margin-top: 1rem;
    }

        .filter-box input {
            margin-bottom: 0.5rem;
        }
</style>

<div class="session-header">Créer un programme</div>

<div class="duo-card">
    <input class="form-control" placeholder="Nom du programme" @bind="programmeName" />
</div>

<div class="duo-card">
    <div class="duo-info"><b>Semaine(s):</b> @plan.Weeks.Count</div>
    <div class="duo-info"><b>Jours:</b> @plan.Weeks.Sum(w => w.Days.Count)</div>
    <div class="duo-info"><b>Exos:</b> @plan.Weeks.Sum(w => w.Days.Sum(d => d.Exercises.Count))</div>
</div>

<button class="duo-btn mb-3" @onclick="AddWeek">➕ Ajouter une semaine</button>

@foreach (var week in plan.Weeks.Select((w, wi) => new { w, wi }))
{
    <div class="duo-card">
        <div class="duo-title">
            <span class="duo-title-text">Semaine @(@week.wi + 1)</span>
        </div>
        <div>
            <button class="duo-icon-btn me-1" @onclick="@(() => AddDay(@week.wi))">➕ Jour</button>
            <button class="duo-icon-btn" @onclick="@(() => DuplicateWeek(@week.wi))">📑 Dupliquer semaine</button>
        </div>
    </div>

    @foreach (var day in week.w.Days.Select((d, di) => new { d, di }))
    {
        <div class="duo-card">
            <div>
                <div class="duo-title">
                    <span class="duo-title-text">Jour @(@day.di + 1)</span>
                </div>
                <button class="duo-icon-btn-small me-1 mb-2" @onclick="@(() => PrepareAddExercise(@week.wi, @day.di))">➕ Exercice</button>
                <button class="duo-icon-btn-small mb-2" @onclick="@(() => DuplicateDay(@week.wi, @day.di))">📄 Dupliquer journée</button>
                @{
                    int weekIdx = week.wi;
                    int dayIdx = day.di;
                }

                @for (int ei = 0; ei < plan.Weeks[weekIdx].Days[dayIdx].Exercises.Count; ei++)
                {
                    int capturedIndex = ei; // ✅ capturer la valeur
                    var ex = plan.Weeks[weekIdx].Days[dayIdx].Exercises[capturedIndex];
                    <div class="duo-info d-flex justify-content-between align-items-center">
                        <span>💪 @ex.ExerciseName — @ex.Series × @ex.Repetitions, @ex.RestTimeSeconds s</span>
                        <button class="duo-icon-btn-small" title="Supprimer"
                                @onclick="async () => await OnRemoveExercise(weekIdx, dayIdx, capturedIndex)">
                            ❌
                        </button>
                    </div>
                }
            </div>
        </div>
    }
}

<div class="filter-box">
    <h4>Filtres</h4>
    <input class="form-control" placeholder="Nom" @bind="filterName" />
    <input class="form-control" placeholder="Description" @bind="filterDescription" />
    <input class="form-control" placeholder="Muscle" @bind="filterMuscle" />

    @* <h5>Catégories</h5>
    <button class="btn btn-sm btn-link" @onclick="() => selectedCategories.Clear()">Tout décocher</button>
    @foreach (var cat in AllCategories)
    {
        <label class="me-2">
            <input type="checkbox" @onchange="e => ToggleFilter(selectedCategories, cat, e)" checked="@selectedCategories.Contains(cat)" /> @cat
        </label>
    }

    <h5>Équipements</h5>
    <button class="btn btn-sm btn-link" @onclick="() => selectedEquipments.Clear()">Tout décocher</button>
    @foreach (var eq in AllEquipments)
    {
        <label class="me-2">
            <input type="checkbox" @onchange="e => ToggleFilter(selectedEquipments, eq, e)" checked="@selectedEquipments.Contains(eq)" /> @eq
        </label>
    } *@

    <h5>Résultats filtrés : @FilteredExercises.Count()</h5>
    <div style="max-height: 300px; overflow-y: scroll;">
        @foreach (var ex in FilteredExercises)
        {
            <div class="duo-card">
                <div>
                    <b>@ex.Name</b> | @ex.Category | @ex.Equipment
                </div>
                <button class="duo-btn" style="font-size:0.9rem; padding: 0.3rem 1rem;" @onclick="@(() => SelectExercise(ex))">Sélectionner</button>
            </div>
        }
    </div>
</div>

@if (selected != null)
{
    <div class="duo-card">
        <div class="duo-title-text">Ajout de : @selected.Name</div>
        <div class="mt-2">
            Séries :
            <input type="number" class="form-control" @bind="inputSeries" min="1" />
            Répétitions :
            <input type="number" class="form-control" @bind="inputReps" min="1" />
            Repos (s) :
            <input type="number" class="form-control" @bind="inputRest" min="0" />
            <button class="duo-btn mt-2" @onclick="ConfirmAddExercise" disabled="@(!IsExerciseTargetValid)">Confirmer l'ajout</button>
        </div>
    </div>
}

<div class="d-flex justify-content-between mt-4">
    <button class="duo-btn" @onclick="SaveToLocal">💾 Sauver local</button>
    <button class="duo-btn" @onclick="OnSaveManualProgramme">☁️ Enregistrer Supabase</button>
</div>

@if (jsonOut != null)
{
    <pre>@jsonOut</pre>
}

@code {
    private string programmeName = "Programme Perso";
    private WorkoutPlan plan = new() { TotalWeeks = 0 };
    private List<ExerciseDefinition> allExercises = new();
    private ExerciseDefinition? selected;
    private int currentWeek, currentDay;
    private int inputSeries = 3, inputReps = 10, inputRest = 60;
    private string? jsonOut;
    private Guid? editingId = null;

    private string filterName = "";
    private string filterDescription = "";
    private string filterMuscle = "";

    private HashSet<string> selectedCategories = new();
    private HashSet<string> selectedEquipments = new();
    private HashSet<string> selectedOrigins = new();
    private HashSet<string> selectedTypes = new();

    private IEnumerable<string> AllCategories => allExercises.Select(e => e.Category).Where(c => !string.IsNullOrWhiteSpace(c)).Distinct().OrderBy(c => c);
    private IEnumerable<string> AllEquipments => allExercises.Select(e => e.Equipment).Where(c => !string.IsNullOrWhiteSpace(c)).Distinct().OrderBy(c => c);
    private IEnumerable<string> AllOrigins => allExercises.Select(e => e.Origin).Where(c => !string.IsNullOrWhiteSpace(c)).Distinct().OrderBy(c => c)!;
    private IEnumerable<string> AllTypes => allExercises.Select(e => e.Type).Where(c => !string.IsNullOrWhiteSpace(c)).Distinct().OrderBy(c => c)!;

    protected override async Task OnInitializedAsync()
    {
        var fromStorage = await LocalStorage.GetItemAsync<ProgrammeModel>("editing_plan");
        if (fromStorage is not null)
        {
            editingId = fromStorage.Id;
            programmeName = fromStorage.Nom;
            plan = JsonSerializer.Deserialize<WorkoutPlan>(fromStorage.Contenu) ?? new();
        }

        var version = DateTime.Now.Ticks;
        allExercises = await Http.GetFromJsonAsync<List<ExerciseDefinition>>($"data/ExercicesListeLocal.json?v={version}") ?? new();
    }

    private void AddWeek()
    {
        plan.TotalWeeks++;
        plan.Weeks.Add(new WorkoutWeek { WeekNumber = plan.TotalWeeks });
    }

    private void DuplicateWeek(int weekIdx)
    {
        if (weekIdx < 0 || weekIdx >= plan.Weeks.Count) return;

        var source = plan.Weeks[weekIdx];

        // Création d'une copie profonde
        var newWeek = new WorkoutWeek
            {
                WeekNumber = plan.TotalWeeks + 1,
                ChargeIncrementPercent = source.ChargeIncrementPercent,
                SeriesWeek = source.SeriesWeek,
                RepetitionsWeek = source.RepetitionsWeek,
                RestTimeWeek = source.RestTimeWeek,
                Days = source.Days.Select(d => new WorkoutDay
                {
                    DayIndex = d.DayIndex,
                    TypeProgramme = d.TypeProgramme,
                    Exercises = d.Exercises.Select(e => new ExerciseSession
                    {
                        ExerciseId = e.ExerciseId,
                        ExerciseName = e.ExerciseName,
                        Series = e.Series,
                        Repetitions = e.Repetitions,
                        RestTimeSeconds = e.RestTimeSeconds,
                        IsSuperset = e.IsSuperset,
                        Pourcentage1RM = /* e.Pourcentage1RM */ 2.5
                    }).ToList()
                }).ToList()
            };

        plan.TotalWeeks++;
        plan.Weeks.Add(newWeek);
    }

    private void AddDay(int weekIdx)
    {
        plan.Weeks[weekIdx].Days.Add(new WorkoutDay
            {
                DayIndex = plan.Weeks[weekIdx].Days.Count + 1,
                TypeProgramme = ProgrammeType.FullBody,
                Exercises = new List<ExerciseSession>()
            });
    }

    private void PrepareAddExercise(int weekIdx, int dayIdx)
    {
        currentWeek = weekIdx;
        currentDay = dayIdx;
    }

    private void SelectExercise(ExerciseDefinition ex) => selected = ex;

    private void ConfirmAddExercise()
    {
        if (selected == null) return;
        if (currentWeek < 0 || currentWeek >= plan.Weeks.Count) return;
        if (currentDay < 0 || currentDay >= plan.Weeks[currentWeek].Days.Count) return;
        var ex = new ExerciseSession
            {
                ExerciseId = selected.Id,
                ExerciseName = selected.Name,
                Series = inputSeries,
                Repetitions = inputReps,
                RestTimeSeconds = inputRest,
                IsSuperset = false,
                Pourcentage1RM = 0
            };

        plan.Weeks[currentWeek].Days[currentDay].Exercises.Add(ex);
        selected = null;
    }

    private async Task OnRemoveExercise(int w, int d, int e)
    {
        RemoveExercise(w, d, e);
        await Task.Yield(); // (ou pas obligatoire)
        StateHasChanged();
    }

    private void ToggleFilter(HashSet<string> set, string value, ChangeEventArgs e)
    {
        if ((bool?)e.Value == true) set.Add(value);
        else set.Remove(value);
    }

    private IEnumerable<ExerciseDefinition> FilteredExercises =>
        allExercises.Where(e =>
            (string.IsNullOrWhiteSpace(filterName) || e.Name.Contains(filterName, StringComparison.OrdinalIgnoreCase)) &&
            (string.IsNullOrWhiteSpace(filterDescription) || e.Description.Contains(filterDescription, StringComparison.OrdinalIgnoreCase)) &&
            (string.IsNullOrWhiteSpace(filterMuscle) || (e.Muscle?.Contains(filterMuscle, StringComparison.OrdinalIgnoreCase) ?? false)) &&
            (selectedCategories.Count == 0 || selectedCategories.Contains(e.Category)) &&
            (selectedEquipments.Count == 0 || selectedEquipments.Contains(e.Equipment)) &&
            (selectedOrigins.Count == 0 || (e.Origin != null && selectedOrigins.Contains(e.Origin))) &&
            (selectedTypes.Count == 0 || (e.Type != null && selectedTypes.Contains(e.Type)))
        );

    private async Task SaveToLocal()
    {
        await LocalStorage.SetItemAsync("custom_plan", plan);
        jsonOut = JsonSerializer.Serialize(plan, new JsonSerializerOptions { WriteIndented = true });
    }

    private async Task OnSaveManualProgramme()
    {
        var model = new ProgrammeModel
            {
                Id = Guid.NewGuid(),
                Nom = programmeName,
                DateDebut = DateTime.Today,
                Contenu = JsonSerializer.Serialize(plan)
            };

        bool ok = await SupabaseService.SaveProgrammeAsync(model, isManual: true);
        if (ok)
        {
            Console.WriteLine("✅ Programme manuel enregistré dans Supabase");
            Nav.NavigateTo("/view-session");
        }
    }
    private void DuplicateDay(int weekIdx, int dayIdx)
    {
        var day = plan.Weeks[weekIdx].Days[dayIdx];
        var newDay = new WorkoutDay
            {
                DayIndex = plan.Weeks[weekIdx].Days.Count + 1,
                TypeProgramme = day.TypeProgramme,
                Exercises = day.Exercises.Select(e => new ExerciseSession
                {
                    ExerciseId = e.ExerciseId,
                    ExerciseName = e.ExerciseName,
                    Series = e.Series,
                    Repetitions = e.Repetitions,
                    RestTimeSeconds = e.RestTimeSeconds,
                    IsSuperset = e.IsSuperset,
                    Pourcentage1RM = e.Pourcentage1RM
                }).ToList()
            };
        plan.Weeks[weekIdx].Days.Add(newDay);
    }

    private void RemoveExercise(int weekIdx, int dayIdx, int exerciseIdx)
    {
        if (weekIdx < 0 || dayIdx < 0 || exerciseIdx < 0) return;
        if (weekIdx >= plan.Weeks.Count) return;
        if (dayIdx >= plan.Weeks[weekIdx].Days.Count) return;
        if (exerciseIdx >= plan.Weeks[weekIdx].Days[dayIdx].Exercises.Count) return;

        plan.Weeks[weekIdx].Days[dayIdx].Exercises.RemoveAt(exerciseIdx);
        StateHasChanged(); // 🔁 Forcer le rendu
    }
    private bool IsExerciseTargetValid =>
    selected != null &&
    currentWeek >= 0 && currentWeek < plan.Weeks.Count &&
    currentDay >= 0 && currentDay < plan.Weeks[currentWeek].Days.Count;
}
