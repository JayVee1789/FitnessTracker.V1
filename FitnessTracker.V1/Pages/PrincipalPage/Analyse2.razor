@page "/analyse"
@using FitnessTracker.V1.Components.Graphique
@using FitnessTracker.V1.Models.Gamification
@inject PoidsService PoidsService
@inject ProgrammeService ProgService
@inject GamificationDbService GamificationDbService
@inject ProfileService profileService

<div class="app-main">
    <div class="section-header d-flex justify-content-between align-items-center">
        📊 Statistiques
        <span class="badge bg-orange text-white">7 jours</span>
    </div>

    <div class="main-stats mb-3">
        <div class="duo-card text-center flex-column">
            <div class="stat-icon streak">🔥</div>
            <div class="stat-value">@getNbStreakDay()</div>
            <div class="stat-label">Jours consécutifs</div>
        </div>
        <div class="duo-card text-center flex-column">
            <div class="stat-icon total">💪</div>
            <div class="stat-value">456</div>
            <div class="stat-label">Séances totales</div>
        </div>
        <div class="duo-card text-center flex-column">
            <div class="stat-icon time">⏱️</div>
            <div class="stat-value">@getTempsTotal()</div>
            <div class="stat-label">Temps d'exercice</div>
        </div>
        <div class="duo-card text-center flex-column">
            <div class="stat-icon calories">🔥</div>
            <div class="stat-value">1240</div>
            <div class="stat-label">Calories brûlées</div>
        </div>
    </div>

    <div class="section-header">📈 Progression hebdomadaire</div>
    <div class="duo-card">
        <div class="w-100 text-center mb-2 fw-bold">Séances par jour</div>
        <div class="d-flex justify-content-around w-100">
            @foreach (var jour in Jours)
            {
                <div class="d-flex flex-column align-items-center">
                    <div class="rounded-pill bg-success" style="width:20px; height:@jour.Height%;"></div>
                    <div style="font-size: 0.8rem;">@jour.Label</div>
                </div>
            }
        </div>
    </div>

    <div class="section-header">🏆 Records</div>
    <div class="records-grid">
        <div class="duo-card flex-column text-center">
            <div class="fw-bold">🏋️ Poids max : 85kg</div>
            <PrTracker Entries="entries" />


        </div>

        <div class="duo-card flex-column text-center">
            <div class="fw-bold">🏃 Longue course : 12.5km</div>
        </div>

        <div class="duo-card flex-column text-center">
            <div class="fw-bold">⏱️ Séance longue : 90 min</div>
        </div>
    </div>



    <div class="section-header">🎖️ Badges débloqués</div>
    <div class="achievements-grid">
        <div class="achievement-badge unlocked">🔥</div>
        <div class="achievement-badge unlocked">💪</div>
        <div class="achievement-badge unlocked">🎯</div>
    </div>
</div>

@code {
    List<(string Label, int Height)> Jours = new()
    {
        ("L", 60), ("M", 40), ("M", 80), ("J", 100), ("V", 70), ("S", 90), ("D", 30)
    };
    private List<PoidsEntry> entries = new();
    private GamificationDbModel? gamificationDbModel;
    protected override async Task OnInitializedAsync()
    {
        entries = await PoidsService.GetEntriesAsync();
        Console.WriteLine($"✅ Analyse loaded entries : {entries.Count}");
        gamificationDbModel = await GamificationDbService.GetGamificationAsync();
        var profile = await profileService.GetOrCreateUserProfileAsync();
    }

    private int getNbStreakDay()
    {
        return gamificationDbModel?.StreakDays ?? 0;
    }

    private int getNbSeanceTotal()
    {
        return gamificationDbModel?.TotalSeances ?? 0;
    }

    private string getTempsTotal()
    {
        int totalMinutes = gamificationDbModel?.TotalTrainingTimeMinutes ?? 0;
        return FormatMinutesLisible(totalMinutes);
    }

    public static string FormatMinutesLisible(int totalMinutes)
    {
        var temps = TimeSpan.FromMinutes(totalMinutes);
        int jours = (int)temps.TotalDays;
        int heures = temps.Hours;
        int minutes = temps.Minutes;

        List<string> parties = new();

        if (jours > 0)
            parties.Add($"{jours}j");
        if (heures > 0)
            parties.Add($"{heures}h");
        if (minutes > 0 || parties.Count == 0)
            parties.Add($"{minutes}mn");

        return string.Join(" ", parties);
    }

    public static double CalculerCalories(int dureeMinutes, double met, double poidsKg)
    {
        double calories = dureeMinutes * met * poidsKg * 0.0175;
        return Math.Round(calories, 1); // arrondi à une décimale
    }



}
