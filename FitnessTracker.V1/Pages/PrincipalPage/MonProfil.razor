@page "/mon-profil"
@using FitnessTracker.V1.Services.Data
@inject Supabase.Client Supabase
@inject NavigationManager Nav
@inject AuthService AuthService
@inject SupabaseService2 SupabaseService
@inject AppState appState

@if (isLoading)
{
    <div class="duo-card">Chargement de votre profil...</div>
}
else if (profile is null)
{
    <div class="duo-card objectif-atteint">❌ Erreur : impossible de charger ou créer un profil utilisateur.</div>
}
else
{
    <EditForm Model="profile" OnValidSubmit="SauvegarderProfil">
        <div class="phone-frame">
            <div class="phone-screen">

                <!-- Header -->
                <div class="monprofil-header">
                    <div class="monprofil-header-left">
                       @*  <button class="monprofil-back-btn">←</button> *@
                        @* <div class="monprofil-header-title">Profil</div> *@
                    </div>
                    <button class="monprofil-save-btn" type="submit">Sauvegarder</button>
                </div>

                <div class="monprofil-content-scroll">

                   @*  <!-- Avatar -->
                    <div class="monprofil-avatar-section">
                        <div class="monprofil-avatar-container">
                            <div class="monprofil-main-avatar">🏋️‍♂️</div>
                            <button class="monprofil-avatar-edit-btn">📷</button>
                        </div>
                        <div class="monprofil-username">Marie Dupont</div>
                        <div class="monprofil-level-info">@profile?.Level</div>
                    </div> *@

                    <!-- Infos personnelles -->
                    <div class="monprofil-form-section">
                        <div class="monprofil-section-title">👤 Informations personnelles</div>

                        <div class="monprofil-form-group">
                            <label class="monprofil-form-label">Âge</label>
                            <InputNumber class="monprofil-form-input" @bind-Value="profile.Age" />
                        </div>

                        <div class="monprofil-dual-input">
                            <div class="monprofil-form-group">
                                <label class="monprofil-form-label">Sexe</label>
                                <InputSelect class="monprofil-form-select" @bind-Value="profile.Sexe">
                                    <option value="Homme">Homme</option>
                                    <option value="Femme">Femme</option>
                                    <option value="Autre">Autre</option>
                                </InputSelect>
                            </div>
                            <div class="monprofil-form-group">
                                <label class="monprofil-form-label">Unité</label>
                                <InputSelect class="monprofil-form-select" @bind-Value="profile.Unite">
                                    <option value="kg">kg</option>
                                    <option value="lb">lb</option>
                                </InputSelect>
                            </div>
                        </div>

                        <div class="monprofil-dual-input">
                            <div class="monprofil-form-group">
                                <label class="monprofil-form-label">Taille (cm)</label>
                                <InputText class="monprofil-form-input" @bind-Value="profile.Taille" />
                            </div>
                            <div class="monprofil-form-group">
                                <label class="monprofil-form-label">Poids</label>
                                <InputNumber class="monprofil-form-input" @bind-Value="profile.Poids" />
                            </div>
                        </div>

                        <div class="monprofil-form-group">
                            <label class="monprofil-form-label">Niveau</label>
                            <InputSelect class="monprofil-form-select" @bind-Value="profile.Level">
                                <option value="Debutant">Débutant</option>
                                <option value="Intermediaire">Intermédiaire</option>
                                <option value="Avance">Avancé</option>
                            </InputSelect>
                        </div>

                        <div class="monprofil-form-group">
                            <label class="monprofil-form-label">Pathologie musculaire</label>
                            <InputText class="monprofil-form-input" @bind-Value="profile.PathologieMuscle" />
                        </div>

                        <div class="monprofil-form-group">
                            <label class="monprofil-form-label">Muscle prioritaire</label>
                            <InputText class="monprofil-form-input" @bind-Value="profile.PriorityMuscle" />
                        </div>
                    </div>

                    <!-- Objectifs -->
                    <div class="monprofil-goals-section">
                        <div class="monprofil-section-title">🎯 Mes objectifs</div>

                        <!-- Objectif -->
                        <div class="monprofil-goal-item">
                            <div class="monprofil-goal-info">
                                <div class="monprofil-goal-icon objectif">⚖️</div>
                                <div class="monprofil-goal-text">Objectif</div>
                            </div>
                            <InputSelect class="monprofil-goal-dropdown" @bind-Value="profile.Objective">
                                <option value="Force">Force</option>
                                <option value="Endurance">Endurance</option>
                                <option value="Hypertrophy">Muscle</option>
                                <option value="Fat_loss">Maigrir</option>
                                <option value="Glutes">Fessiers</option>
                            </InputSelect>
                        </div>

                        <!-- Séances/semaine -->
                        <div class="monprofil-goal-item">
                            <div class="monprofil-goal-info">
                                <div class="monprofil-goal-icon frequence">📅</div>
                                <div class="monprofil-goal-text">Fréquence</div>
                            </div>
                            <InputSelect class="monprofil-goal-dropdown" @bind-Value="profile.SeancesPerWeek">
                                @for (int i = 1; i <= 6; i++)
                                {
                                    <option value="@i">@i x/semaine</option>
                                }
                            </InputSelect>
                        </div>

                        <!-- Durée -->
                        <div class="monprofil-goal-item">
                            <div class="monprofil-goal-info">
                                <div class="monprofil-goal-icon duree">⏱️</div>
                                <div class="monprofil-goal-text">Durée</div>
                            </div>
                            <InputSelect class="monprofil-goal-dropdown" @bind-Value="profile.ProgramDurationMonths">
                                @for (int m = 1; m <= 3; m++)
                                {
                                    <option value="@m">@m mois</option>
                                }
                            </InputSelect>
                        </div>
                    </div>


                    <!-- Préférences -->
                    <div class="monprofil-preferences-section">
                        <div class="monprofil-section-title">⚙️ Préférences</div>

                        <div class="monprofil-preference-item">
                            <div class="monprofil-preference-info">
                                <div class="monprofil-preference-icon">🔀</div>
                                <div class="monprofil-preference-text">Supersets</div>
                            </div>
                            <div class="toggle-switch @(profile.WantsSuperset ? "active" : null)" @onclick="() => profile.WantsSuperset = !profile.WantsSuperset">
                                <div class="toggle-knob"></div>
                            </div>
                        </div>

                        <div class="monprofil-preference-item">
                            <div class="monprofil-preference-info">
                                <div class="monprofil-preference-icon">🏃‍♂️</div>
                                <div class="monprofil-preference-text">Poids du corps</div>
                            </div>
                            <div class="toggle-switch @(profile.BodyweightOnly ? "active" : null)" @onclick="() => profile.BodyweightOnly = !profile.BodyweightOnly">
                                <div class="toggle-knob"></div>
                            </div>
                        </div>
                    </div>
                    <!-- Zone dangereuse -->
                    <div class="monprofil-danger-section">
                        <div class="monprofil-section-title">⚠️ Zone dangereuse</div>

                        <!-- Suppression -->
                        <button class="monprofil-danger-btn" type="button">Supprimer mon profil</button>

                        <!-- Changement de mot de passe -->
                        <div class="monprofil-password-card mt-4">
                            <div class="monprofil-password-title">🔐 Changer mon mot de passe</div>

                            <input type="password" class="monprofil-form-input mt-2" placeholder="Nouveau mot de passe" @bind="newPassword" />

                            <button class="monprofil-save-btn mt-3" type="button" @onclick="ChangePassword">Mettre à jour</button>

                            @if (!string.IsNullOrEmpty(passwordMessage))
                            {
                                <div class="monprofil-feedback mt-2">@passwordMessage</div>
                            }
                        </div>
                    </div>

                    
                </div>
            </div>
        </div>
    </EditForm>

    <div class="toast-message @toastClass">@toastMessage</div>
    
} 

@code {
    private SportProfileModel? profile;
    private string? toastMessage;
    private bool isLoading = true;
    private string toastClass = "";
    
    protected override async Task OnInitializedAsync()
    {
        var restored = await SupabaseService.LoadSessionAsync();
        Console.WriteLine($"🟢 Session restaurée : {restored}");
        var user = Supabase.Auth.CurrentUser;
        if (user is null)
        {
            Nav.NavigateTo("/login", true);
            return;
        }

        try
        {
            var results = await Supabase
                .From<SportProfileModel>()
                .Where(x => x.Id == user.Id)
                .Get();

            profile = results.Models.FirstOrDefault();

            if (profile == null)
            {
                profile = new SportProfileModel
                {
                    Id = user.Id,
                    Age = 25,
                    Sexe = "Homme",
                    Taille= "180",
                    Poids=80,
                    Level = "Debutant",
                    Objective = "Hypertrophy",
                    SeancesPerWeek = 3,
                    ProgramDurationMonths = 3,
                    WantsSuperset = false,
                    BodyweightOnly = false,
                    PathologieMuscle = "",
                    PriorityMuscle = "",
                        Unite = "kg"
                };
                await Supabase.From<SportProfileModel>().Upsert(profile);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("❌ Erreur lors du chargement du profil : " + ex.Message);
        }

        isLoading = false;
    }

    private async Task SauvegarderProfil()
    {
        if (profile is null) return;

        await Supabase.From<SportProfileModel>().Upsert(profile);

        // ✅ Utiliser la méthode officielle pour notifier les autres composants
        appState.SetUnite(profile.Unite == "lb");

        toastMessage = "✅ Profil sauvegardé avec succès.";
        toastClass = "show";

        await Task.Delay(2500);
        toastClass = "";
        StateHasChanged();
    }


    private string newPassword = "";
    private string passwordMessage = "";

    private async Task ChangePassword()
    {
        if (string.IsNullOrWhiteSpace(newPassword) || newPassword.Length < 6)
        {
            passwordMessage = "❌ Le mot de passe doit contenir au moins 6 caractères.";
            return;
        }

        var success = await AuthService.UpdatePasswordAsync(newPassword);
        passwordMessage = success
            ? "✅ Mot de passe mis à jour avec succès."
            : "❌ Une erreur est survenue lors de la mise à jour.";
    }
}
