@page "/mon-profil"
@inject Supabase.Client Supabase
@inject NavigationManager Nav
@inject AuthService AuthService

<div class="session-header">👤 Mon profil sportif</div>

@if (isLoading)
{
    <div class="duo-card">Chargement de votre profil...</div>
}
else if (profile is null)
{
    <div class="duo-card objectif-atteint">❌ Erreur : impossible de charger ou créer un profil utilisateur.</div>
}
else
{
    <EditForm Model="profile" OnValidSubmit="SauvegarderProfil">
        <div class="duo-card">
            <div class="duo-title">Âge</div>
            <InputNumber class="form-control" @bind-Value="profile.Age" />
        </div>
        <div class="duo-card">
            <div class="duo-title">Poids (kg)</div>
            <InputNumber class="form-control" @bind-Value="profile.Poids" />
        </div>

        <div class="duo-card">
            <div class="duo-title">Taille (cm ou format libre)</div>
            <InputText class="form-control" @bind-Value="profile.Taille" />
        </div>
        <div class="duo-card">
            <div class="duo-title">Sexe</div>
            <InputSelect class="form-select" @bind-Value="profile.Sexe">
                <option value="Homme">Homme</option>
                <option value="Femme">Femme</option>
                <option value="Autre">Autre</option>
            </InputSelect>
        </div>

        <div class="duo-card">
            <div class="duo-title">Niveau</div>
            <InputSelect class="form-select" @bind-Value="profile.Level">
                <option value="Debutant">Débutant</option>
                <option value="Intermediaire">Intermédiaire</option>
                <option value="Avance">Avancé</option>
            </InputSelect>
        </div>

        <div class="duo-card">
            <div class="duo-title">Objectif</div>
            <InputSelect class="form-select" @bind-Value="profile.Objective">
                <option value="Force">Force</option>
                <option value="Endurance">Endurance</option>
                <option value="Hypertrophy">Hypertrophie</option>
                <option value="Fat_loss">Perte de poids</option>
                <option value="Mobility">Mobilité</option>
                <option value="Strength">Force / Strength</option>
                <option value="Glutes">Fessiers</option>
                <option value="Calistenie">Calisthenie</option>
            </InputSelect>
        </div>

        <div class="duo-card">
            <div class="duo-title">Séances / semaine</div>
            <InputNumber class="form-control" @bind-Value="profile.SeancesPerWeek" />
        </div>

        <div class="duo-card">
            <div class="duo-title">Durée du programme (mois)</div>
            <InputNumber class="form-control" @bind-Value="profile.ProgramDurationMonths" />
        </div>

        <div class="duo-card">
            <div class="form-check mb-2">
                <InputCheckbox class="form-check-input" @bind-Value="profile.WantsSuperset" id="superset" />
                <label class="form-check-label" for="superset">Utiliser des supersets</label>
            </div>

            <div class="form-check">
                <InputCheckbox class="form-check-input" @bind-Value="profile.BodyweightOnly" id="poidscorps" />
                <label class="form-check-label" for="poidscorps">Poids du corps uniquement</label>
            </div>
        </div>

        <div class="duo-card">
            <div class="duo-title">Pathologie musculaire</div>
            <InputText class="form-control" @bind-Value="profile.PathologieMuscle" />
        </div>

        <div class="duo-card">
            <div class="duo-title">Muscle prioritaire</div>
            <InputText class="form-control" @bind-Value="profile.PriorityMuscle" />
        </div>
        <div class="duo-card">
            <div class="duo-title">Unité préférée</div>
            <InputSelect class="form-select" @bind-Value="profile.Unite">
                <option value="kg">Kilogrammes (kg)</option>
                <option value="lb">Livres (lb)</option>
            </InputSelect>
        </div>
        <div class="text-center mt-4">
            <button class="duo-btn">💾 Sauvegarder</button>
        </div>

        @if (message is not null)
        {
            <div class="motiv-message">@message</div>
        }
    </EditForm>

    <div class="duo-card mt-4">
        <div class="duo-title">🔐 Changer mon mot de passe</div>
        <input type="password" class="form-control mt-2" placeholder="Nouveau mot de passe" @bind="newPassword" />
        <button class="duo-btn mt-3" @onclick="ChangePassword">Mettre à jour</button>

        @if (!string.IsNullOrEmpty(passwordMessage))
        {
            <div class="motiv-message mt-2">@passwordMessage</div>
        }
    </div>
}

@code {
    private SportProfileModel? profile;
    private string? message;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        var user = Supabase.Auth.CurrentUser;
        if (user is null)
        {
            Nav.NavigateTo("/login", true);
            return;
        }

        try
        {
            var results = await Supabase
                .From<SportProfileModel>()
                .Where(x => x.Id == user.Id)
                .Get();

            profile = results.Models.FirstOrDefault();

            if (profile == null)
            {
                profile = new SportProfileModel
                {
                    Id = user.Id,
                    Age = 25,
                    Sexe = "Homme",
                    Taille= "180",
                    Poids=80,
                    Level = "Debutant",
                    Objective = "Hypertrophy",
                    SeancesPerWeek = 3,
                    ProgramDurationMonths = 3,
                    WantsSuperset = false,
                    BodyweightOnly = false,
                    PathologieMuscle = "",
                    PriorityMuscle = "",
                        Unite = "kg"
                };
                await Supabase.From<SportProfileModel>().Upsert(profile);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("❌ Erreur lors du chargement du profil : " + ex.Message);
        }

        isLoading = false;
    }

    private async Task SauvegarderProfil()
    {
        if (profile is null) return;
        await Supabase.From<SportProfileModel>().Upsert(profile);
        message = "✅ Profil sauvegardé avec succès.";
    }

    private string newPassword = "";
    private string passwordMessage = "";

    private async Task ChangePassword()
    {
        if (string.IsNullOrWhiteSpace(newPassword) || newPassword.Length < 6)
        {
            passwordMessage = "❌ Le mot de passe doit contenir au moins 6 caractères.";
            return;
        }

        var success = await AuthService.UpdatePasswordAsync(newPassword);
        passwordMessage = success
            ? "✅ Mot de passe mis à jour avec succès."
            : "❌ Une erreur est survenue lors de la mise à jour.";
    }
}
