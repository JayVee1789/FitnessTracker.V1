@page "/register"
@inject Supabase.Client Supabase
@inject NavigationManager Nav

<div class="mobile-container d-flex flex-column justify-content-center align-items-center app-main">
    <div class="duo-card w-100" style="max-width: 420px;">
        <div class="w-100">
            <h2 class="text-center session-header mb-3">📝 Créer un compte</h2>

            @if (!registered)
            {
                <div class="mb-3">
                    <label for="email" class="duo-title-text">Email</label>
                    <input id="email" placeholder="ex: jean@email.com" class="form-control" @bind="email" />
                </div>

                <div class="mb-3">
                    <label for="password" class="duo-title-text">Mot de passe</label>
                    <input id="password" placeholder="••••••••" type="password" class="form-control" @bind="password" />
                </div>

                <button class="duo-btn w-100 mb-3" @onclick="RegisterUser">Créer mon compte</button>

                @if (!string.IsNullOrEmpty(error))
                {
                    <div class="alert alert-danger text-center">@error</div>
                }

                <p class="mt-3 text-center">
                    Déjà inscrit ?
                    <a href="/login" class="duo-title-text ms-1">Se connecter</a>
                </p>
            }
            else
            {
                <div class="alert alert-success text-center">
                    ✅ Compte créé avec succès !<br />
                    Redirection vers votre profil...
                </div>
            }
        </div>
    </div>
</div>

@code {
    private string email = "";
    private string password = "";
    private string role = "";
    private bool registered = false;
    private string error = "";

    private async Task RegisterUser()
    {
        error = "";

        if (string.IsNullOrWhiteSpace(email))
        {
            error = "❌ L'email est requis.";
            return;
        }

        if (!IsValidEmail(email))
        {
            error = "❌ Format d'email invalide.";
            return;
        }

        if (string.IsNullOrWhiteSpace(password) || password.Length < 6)
        {
            error = "❌ Le mot de passe doit contenir au moins 6 caractères.";
            return;
        }

        try
        {
            var session = await Supabase.Auth.SignUp(email, password);
            if (session?.User is not null)
            {
                var profile = new SupabaseUserProfile
                    {
                        Id = session.User.Id,
                        Email = email,
                        Role = "user"
                    };

                await Supabase.From<SupabaseUserProfile>().Insert(profile);

                registered = true;
                await Task.Delay(1000);
                Nav.NavigateTo("/mon-profil");
            }
            else
            {
                error = "❌ Échec de l'inscription. Veuillez réessayer.";
            }
        }
        catch (Exception ex)
        {
            error = $"❌ Erreur : {ex.Message}";
        }
    }

    private bool IsValidEmail(string email)
    {
        try
        {
            var addr = new System.Net.Mail.MailAddress(email);
            return addr.Address == email;
        }
        catch
        {
            return false;
        }
    }
}
