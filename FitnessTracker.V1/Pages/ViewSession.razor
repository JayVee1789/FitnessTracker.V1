@page "/view-session"
@using FitnessTracker.V1.Models
@using FitnessTracker.V1.Models.FitnessTracker.V1.Models
@using FitnessTracker.V1.Services
@using FitnessTracker.V1.Helper
@using FitnessTracker.V1.Services.ProgrammeGeneration
@using System.Text.Json
@using static FitnessTracker.V1.Models.Model
@using FitnessTracker.V1.Mapping

@* @using Progress = FitnessTracker.V1.Components.ProgressBar *@
@using static FitnessTracker.V1.Components.SessionProgressBar
@inject SupabaseService2 SupabaseService
@inject PoidsService PoidsService
@inject IJSRuntime JS
@inject NavigationManager Nav
@inject AuthService AuthService
@inject HttpClient Http
@inject ViewSessionHelper viewSessionHelper
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage

@inject ProfileService ProfileService  
@inject FitnessTracker.V1.Models.AppState appState
@inject FitnessTracker.V1.Services.Gamification.GamificationManager Gamification


@code {
    private string progress => SelectedPlan?.TotalWeeks > 0
        ? Math.Min(100, Math.Round((SelectedSemaineIndex * 7 + SelectedJourIndex) * 100.0 / (SelectedPlan.TotalWeeks * 7))) + "%"
        : "0%";

    private int ExercicesCompletes() =>
   Exercises.Count(e => e.ObjectifAtteint && e.ExerciseName != "Repos");

    private int ExercicesTotales() =>
        Exercises.Count(e => e.ExerciseName != "Repos");

    private async Task CheckFireworks()
    {
        if (ExercicesTotales() > 0 && ExercicesCompletes() == ExercicesTotales())
        {
            await JS.InvokeVoidAsync("launchFireworks");
        }
    }
}



<div class="session-header">
    Session du Jour 💪
</div>
@if (Gamification?.State != null)
{
    <div class="progress-container" style="display: flex; align-items: center;">
        <span>Niveau @Gamification.State.Level</span>
        <div class="progress-bar flex-fill mx-2" style="position: relative;">
            <div class="progress-fill" style="width:@((Gamification.State.TotalXP % 1000) / 10)%"></div>
        </div>
        <span class="trophy-icon">🏆</span>
    </div>

}

<SessionProgressBar Completed="@ExercicesCompletes()" TotalDone="@ExercicesTotales()" />

@* 
@if (ExercicesTotales() > 0 && ExercicesCompletes() == ExercicesTotales())
{
    <div>
        <script>
            await JS.InvokeVoidAsync("launchFireworks");
        </script>
    </div>
} *@


<!-- Sélecteurs Programme/Semaine/Jour -->
<div class="row gy-2 gx-3 mb-4 px-3">
    <div class="col-12 col-md-4">
        <label class="form-label text-white">Programme : </label>
        @if (SelectedPlan is not null)
        {

            <button class="duo-icon-btn-small text-danger ms-2"
            title="Supprimer ce programme"
            data-bs-toggle="modal"
            data-bs-target="#confirmModal">
                🗑️
            </button>

        }
        <select class="form-select rounded-pill" @onchange="OnProgrammeSelected">
            <option value="">-- Sélectionner --</option>
            @foreach (var prog in Programmes)
            {
                <option value="@prog.Id">@prog.Nom (@prog.DateDebut.ToShortDateString())</option>
            }
        </select>
    </div>

    @if (SelectedPlanAvailable)
    {
        <div class="col-6 col-md-4">
            <label class="form-label text-white">Semaine :</label>
            <select class="form-select rounded-pill" @onchange="OnSemaineChanged">
                @for (int i = 0; i < SelectedPlan?.Weeks.Count; i++)
                {
                    bool semaineComplete = SelectedPlan.Weeks[i].Days.All(day =>
                    day.IsRest || ExercisesSemaineComplete(i, day.DayIndex));

                    <option value="@i" class="@(semaineComplete ? "completed-option" : "")">
                        Semaine @(i + 1)
                    </option>
                }
            </select>
        </div>

        <div class="col-6 col-md-4">
            <label class="form-label text-white">Jour :</label>
            <select class="form-select rounded-pill" @onchange="OnJourChanged">
                @for (int j = 1; j <= 7; j++)
                {
                    bool jourComplete = ExercisesJourComplete(j);

                    <option value="@j" class="@(jourComplete ? "completed-option" : "")">
                        Jour @j
                    </option>
                }
            </select>
        </div>
    }
</div>

@if (Exercises.Any())
{
    <div class="d-flex flex-column gap-3 px-3">


        @for (int i = 0; i < Exercises.Count; i++)
        {
            var ex = Exercises[i];

            <div class="duo-card @(ex.ObjectifAtteint ? "objectif-atteint" : "")">
                <div class="flex-1">
                    <div class="duo-title">
                        <span class="duo-title-text">@ex.ExerciseName</span>
                        <a class="duo-video-icon" href="@($"https://www.youtube.com/results?search_query={ex.ExerciseName}+exercise")"
                        target="_blank" title="Voir la vidéo">🎥</a>
                        <button class="duo-icon-btn" data-bs-toggle="modal" data-bs-target="#modalRemplacement"
                        @onclick="() => ProposerRemplacement(ex)" title="Changer d’exercice">
                            🔁
                        </button>
                    </div>

                    <div class="duo-info">@ex.Series série(s) de @ex.Repetitions répétition(s) – Repos : @ex.RestTimeSeconds s</div>
                    <div class="duo-info">Charge : @ex.Pourcentage1RM % 1RM</div>

                    <div class="input-group mt-3" style="max-width: 260px;">
                        <input type="number"
                        class="form-control form-control-sm rounded-pill text-center"
                        step="0.5"
                        value="@ex.PoidsAffiche"
                        @oninput="e => SetPoidsEtSale(e, ex)" />
                        <span class="input-group-text bg-light border-0">@((appState.AfficherEnLb ? "lb" : "kg"))</span>
                        <span class="input-group-text bg-light border-0 fw-bold" style="font-size: 0.85rem;">
                            🎯 @(appState.AfficherEnLb
                                ? $"{Math.Round(ex.Objectif / 0.453592, 1)} lb"
                                : $"{Math.Round(ex.Objectif, 1)} kg")
                        </span>
                    </div>

                </div>

                <button class="checkmark" @onclick="() => MarquerAtteint(ex)">
                    ✔️
                </button>
            </div>

            @if (i < Exercises.Count - 1 && ex.IsSuperset && Exercises[i + 1].IsSuperset)
            {
                <div class="superset-link">
                    <i class="bi bi-link-45deg"></i>
                </div>
            }
        }

    </div>

    <div class="text-center mt-4">
        <button class="duo-btn px-5 py-2 fs-5" @onclick="OnSessionTerminee">
            Session terminée 🎉
        </button>
    </div>
    <div class="toast-message @toastClass">@toastMessage</div>

    <div class="motiv-message">
        Continue comme ça ! Tu vas tout déchirer 💥
    </div>
}

@if (!Exercises.Any())
{
    <div class="alert alert-light text-center m-3">
        Aucune séance sélectionnée.
    </div>
}

@code {


}

<!-- -------------------------------------------------------------
     SECTION 4 : Modales (confirmation suppression + remplacement)
-------------------------------------------------------------- -->
<!-- Modal confirmation suppression -->
<div class="modal fade" id="confirmModal" tabindex="-1" aria-labelledby="confirmModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header bg-danger text-white">
                <h5 class="modal-title" id="confirmModalLabel">Confirmer la suppression</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                Êtes-vous sûr de vouloir supprimer ce programme&nbsp;?
            </div>
            <div class="modal-footer">
                <button class="btn btn-secondary" data-bs-dismiss="modal">Annuler</button>
                <button class="btn btn-danger" @onclick="ConfirmerSuppression">Oui, supprimer</button>
            </div>
        </div>
    </div>
</div>

<!-- Modal remplacement exercice -->
<div class="modal fade" id="modalRemplacement" tabindex="-1" aria-labelledby="modalRemplacementLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content duo-modal">
            <div class="modal-header bg-info text-white">
                <h5 class="modal-title fw-bold" id="modalRemplacementLabel">🔁 Remplacer l'exercice</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                @if (ExerciceCible is not null)
                {
                    <p><strong>Actuel :</strong> @ExerciceCible.ExerciseName</p>
                    <p>Suggestions :</p>
                    @foreach (var s in Suggestions)
                    {
                        <div class="d-flex justify-content-between align-items-center mb-3 px-2">
                            <span class="fw-bold">@s</span>
                            <button class="duo-btn-mini" data-bs-dismiss="modal" @onclick="() => ConfirmerRemplacement(s)">
                                ✅ Choisir
                            </button>
                        </div>
                    }
                }
            </div>
        </div>
    </div>
</div>

@code {
    private List<ProgrammeModel> Programmes = new();
    private WorkoutPlan? SelectedPlan;
    private Guid SelectedProgrammeId;
    private string SelectedProgrammeSource = "auto";
    private int SelectedSemaineIndex = 0;
    private int SelectedJourIndex = 1;
    private List<ExerciceJour> Exercises = new();
    private DateTime SelectedProgrammeDate = DateTime.Today;
    public static bool AfficherEnLb { get; set; } = false;
    private ExerciceJour? ExerciceCible = null;
    private List<string> Suggestions = new();
    private string? userId;
    private string GetInputId(ExerciceJour ex) => $"{ex.ExerciseName}_{Guid.NewGuid()}";
    List<ExerciseDefinition> allExercises = new();
    private bool SelectedPlanAvailable => SelectedPlan is not null;
    private List<string> SeancesCompletes = new(); // ex: "progId:sem:jour"

    private string toastMessage = "";
    private string toastClass = "";

    protected override void OnInitialized()
    {
        appState.OnChange += StateHasChanged;
    }
    public void Dispose()
    {
        appState.OnChange -= StateHasChanged;
    }

    protected override async Task OnInitializedAsync()
    {
        if (!AuthService.IsAuthenticated)
        {
            Nav.NavigateTo("/login", forceLoad: true);
            return;
        }

        try
        {
            await Gamification.InitializeAsync();
            userId = SupabaseService.GetCurrentUserId();
            Console.WriteLine("🔑 Utilisateur actuel : " + userId);
            var data = await JS.InvokeAsync<string>("localStorage.getItem", "seancesCompletes");
            if (!string.IsNullOrEmpty(data))
            {
                SeancesCompletes = data.Split(',').ToList();
            }
            // 🔄 Tente une synchro silencieuse sans casser la suite
            // await PoidsService.SyncFromSupabaseAsync();
            var supabaseEntries = await SupabaseService.GetEntriesAsync();
            await PoidsService.OverwriteEntriesAsync(supabaseEntries);
            Console.WriteLine($"✅ Synchro initiale : {supabaseEntries.Count} entrées chargées.");
            var profile = await ProfileService.GetOrCreateUserProfileAsync();
            appState.SetUnite(profile.Unite == "lb");

        }
        catch (Exception ex)
        {
            Console.WriteLine("Erreur de synchro Supabase → localStorage : " + ex.Message);
            // Optionnel : afficher une alerte ou logger
        }

        // ✅ Chargement des programmes comme avant
        // Programmes = await SupabaseService.GetAllProgrammesAsync();
        // ✅ Chargement des programmes par user
        // Programmes = await SupabaseService.GetAllProgrammesForCurrentUserAsync();
        var supabaseProgrammes = await SupabaseService.GetAllProgrammesForCurrentUserAsync();
        var locaux = await ChargerProgrammesLocauxAutoAsync();
        // On nettoie les doublons par ID, en gardant priorité à Supabase
        var supabaseIds = supabaseProgrammes.Select(p => p.Id).ToHashSet();

        // On ne garde que les locaux qui n'existent pas dans Supabase
        var locauxFiltrés = locaux.Where(l => !supabaseIds.Contains(l.Id)).ToList();

        // Liste finale, aucun doublon
        Programmes = supabaseProgrammes.Concat(locauxFiltrés).ToList();
    }


    #region SELECTION PROGRAMME
    private async Task OnProgrammeSelected(ChangeEventArgs e)
    {
        Exercises.Clear();
        var value = e.Value?.ToString();
        if (Guid.TryParse(value, out var id))
        {
            var selectedProgramme = Programmes.FirstOrDefault(p => p.Id == id);
            if (string.IsNullOrWhiteSpace(selectedProgramme.Contenu))
            {
                Console.WriteLine("❌ Contenu vide, on ne doit PAS lancer Generate ici !");
                return;
            }
            if (selectedProgramme is not null)
            {
                SelectedProgrammeId = id;
                SelectedProgrammeSource = selectedProgramme.Source;
                var options = new JsonSerializerOptions
                    {
                        PropertyNameCaseInsensitive = true
                    };

                SelectedPlan = JsonSerializer.Deserialize<WorkoutPlan>(selectedProgramme.Contenu,options);
                Console.WriteLine("🎯 Premier exo jour 1 : " + SelectedPlan?.Weeks[0].Days[0].Exercises[0].ExerciseName);
                Console.WriteLine("🔍 Type réel : " + SelectedPlan?.Weeks[0].Days[0].Exercises[0].GetType());


                SelectedProgrammeDate = selectedProgramme.DateDebut;

                // SelectedSemaineIndex = 0;
                // SelectedJourIndex = 1;
                // TrouverProchaineSeance();

                await ChargerSeance();
            }
        }
    }

    private async Task OnSemaineChanged(ChangeEventArgs e)
    {
        SelectedSemaineIndex = int.Parse(e.Value?.ToString() ?? "0");
        await ChargerSeance();
    }

    private async Task OnJourChanged(ChangeEventArgs e)
    {
        SelectedJourIndex = int.Parse(e.Value?.ToString() ?? "1");
        await ChargerSeance();
    }

    #endregion

    #region SAUVEGARDE
    private async Task SauvegarderProgrammeModifié()
    {
        if (SelectedPlan is null || SelectedProgrammeId == Guid.Empty)
            return;

        try
        {


            var programme = Programmes.FirstOrDefault(p => p.Id == SelectedProgrammeId);

            Console.WriteLine("🧠 Sauvegarde BD de : " + programme.Id);
            Console.WriteLine("📦 Contenu JSON : " + programme.Contenu?.Substring(0, 200));

            if (programme is not null)
            {
                programme.Contenu = JsonSerializer.Serialize(SelectedPlan);
                Console.WriteLine("✅ Programme mis à jour (contenu):");
                Console.WriteLine(programme.Contenu.Substring(0, 300));
                var success = await SupabaseService.UpdateProgrammeUnifiedAsync(programme);

                if (success)
                {
                    Console.WriteLine("✅ Programme mis à jour avec succès.");
                }
                else
                {
                    Console.WriteLine("❌ Erreur lors de la mise à jour du programme.");
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"❌ Exception durant la mise à jour du programme : {ex.Message}");
        }
    }

    private async Task SauvegarderSeance()
    {
        foreach (var ex in Exercises)
        {
            Console.WriteLine($"🔍 {ex.ExerciseName} | IsDirty = {ex.IsDirty} | Poids = {ex.PoidsUtilisé}");

            if (ex.ExerciseName == "Repos") continue;
            double poidsKg = 0;
            // ⚠️ Utiliser IsLb (pas AfficherEnLb)
            if (ex.IsLb)
            {
                poidsKg = ex.PoidsAffiche * 0.453592;
            }
            else
            {
                poidsKg = ex.PoidsAffiche;
            }
            // var poidsKg = ex.IsLb ? ex.PoidsUtilisé * 0.453592 : ex.PoidsUtilisé;

            var entry = new PoidsEntry
                {
                    Exercice = ex.ExerciseName,
                    Date = DateTime.Today,
                    Poids = poidsKg,
                    UserId = userId,

                    EnLb = ex.IsLb
                };

            var local = new PoidsEntryLocal
                {
                    Exercice = ex.ExerciseName,
                    Date = DateTime.Today,
                    Poids = poidsKg,
                    UserId = userId,
                    EnLb = ex.IsLb
                };

            try
            {
                // 🔁 méthode unifiée pour gérer doublons + synchro
                await PoidsService.SaveEntryUnifiedAsync(entry, local);
                Console.WriteLine($"✅ Entrée sauvegardée : {entry.Exercice} - {entry.Poids} kg");

            }
            catch (Exception exerer)
            {
                Console.WriteLine("❌ Erreur sauvegarde : " + exerer.Message);
            }
        }

        // 🔄 Sauvegarde le programme aussi
        await SauvegarderProgrammeModifié();
        Console.WriteLine("✅ Séance et programme sauvegardés avec succès.");
    }

    private bool HasPerformanceChanged() => Exercises.Any(e => e.IsDirty);
    private async Task SaveEverything()
    {
        AppliquerModificationsDansSelectedPlan(); // ✅ important

        if (HasPerformanceChanged())
        {
            Console.WriteLine("🔁 Des performances ont changé");
            await SauvegarderSeance();          // ← enregistre Poids + programme
            foreach (var ex in Exercises) ex.AcceptChanges();
            toastMessage = "✅ Données enregistrées";
        }
        else
        {
            Console.WriteLine("📄 Aucune modif → on sauvegarde juste le plan");
            await SauvegarderProgrammeModifié(); // ← programme seul
            toastMessage = "ℹ️ Aucun changement à enregistrer";

        }
        // MarquerSeanceCommeComplete();
        // await JS.InvokeVoidAsync("showToast", "✅ Session enregistrées");
        toastClass = "show";
        MarquerSeanceCommeComplete();
        StateHasChanged();
        await Task.Delay(2500);
        toastClass = "";
        StateHasChanged();
    }

    #endregion

    #region MODULE REMPLACEMENT EXERCICE AVEC MODAL ET MODAL CONFIRMATION SUPPRESSION
    private async Task ProposerRemplacement(ExerciceJour ex)
    {
        ExerciceCible = ex;
        var version = DateTime.Now.Ticks;
        allExercises = await Http.GetFromJsonAsync<List<ExerciseDefinition>>($"data/ExercicesListeLocal.json?v={version}") ?? new();
        var original = allExercises.FirstOrDefault(e => e.Name == ex.ExerciseName);
        if (original == null)
        {
            Console.WriteLine("⚠️ Exercice source introuvable dans la base.");
            Suggestions = new(); return;
        }

        string baseCategory = original.Category?.Split('/').FirstOrDefault()?.Trim() ?? "";

        Suggestions = allExercises
            .Where(e =>
                e.Name != original.Name &&
                e.Origin == original.Origin &&
                e.Description == original.Description &&
                e.Category.StartsWith(baseCategory, StringComparison.OrdinalIgnoreCase))
            .OrderBy(_ => Guid.NewGuid())
            .Select(e => e.Name)
            .Take(2)
            .ToList();

        Console.WriteLine($"🔁 Suggestions trouvées pour {original.Name} : {string.Join(", ", Suggestions)}");
    }

    // private async Task ConfirmerRemplacement(string nouveau)
    // {
    //     if (ExerciceCible is null || SelectedPlan is null) return;

    //     //  Mémoriser l'ancien nom AVANT le remplacement
    //     string ancienNom = ExerciceCible.ExerciseName;

    //     //  Remplacer dans la séance affichée
    //     ExerciceCible.ExerciseName = nouveau;

    //     //  Remplacer aussi dans le plan du programme (WorkoutPlan)
    //     var semaine = SelectedPlan.Weeks.ElementAtOrDefault(SelectedSemaineIndex);
    //     var jour = semaine?.Days.FirstOrDefault(d => d.DayIndex == SelectedJourIndex);

    //     var exOriginal = jour?.Exercises.FirstOrDefault(e => e.ExerciseName == ancienNom);
    //     if (exOriginal is not null)
    //     {
    //         exOriginal.ExerciseName = nouveau;
    //     }

    //     try
    //     {
    //         // ✅ Sauvegarder le programme modifié après remplacement
    //         await SauvegarderProgrammeModifié();
    //         Console.WriteLine("✅ Programme mis à jour après remplacement.");
    //     }
    //     catch (Exception ex)
    //     {
    //         Console.WriteLine(ex);
    //     }


    //     ExerciceCible = null;
    //     StateHasChanged();
    // }
    private async Task ConfirmerRemplacement(string nouveau)
    {
        if (ExerciceCible is null || SelectedPlan is null) return;

        // Met à jour l'exercice affiché
        ExerciceCible.ExerciseName = nouveau;

        // Met à jour l'exercice dans le plan enregistré
        var semaine = SelectedPlan.Weeks.ElementAtOrDefault(SelectedSemaineIndex);
        var jour = semaine?.Days.FirstOrDefault(d => d.DayIndex == SelectedJourIndex);

        if (jour is not null)
        {
            // Supprimer l'exercice existant
            jour.Exercises.RemoveAll(e => e.ExerciseName == ExerciceCible.ExerciseName);

            // Ajouter la nouvelle version (à mapper)
            jour.Exercises.Add(ExerciseMapper.MapToSession(ExerciceCible));
        }

        await SauvegarderProgrammeModifié();
        ExerciceCible = null;
        StateHasChanged();
    }

    private async Task RemplacerExercice(string nouveau)
    {
        if (ExerciceCible is null)
            return;

        ExerciceCible.ExerciseName = nouveau;
        ExerciceCible = null;

        // await JS.InvokeVoidAsync("hideModal", "modalRemplacement");
        // 👉 Pas de await → compatible Hot Reload
        await JS.InvokeVoidAsync("hideModal", "modalRemplacement").AsTask();
        StateHasChanged();
    }

    private async Task ConfirmerSuppression()
    {
        var modal = await JS.InvokeAsync<IJSObjectReference>("bootstrap.Modal.getInstance", "#confirmModal");
        await modal.InvokeVoidAsync("hide");

        if (SelectedProgrammeId == Guid.Empty)
            return;

        bool supabaseOk = false;
        bool localOk = false;

        // ✅ Supprimer côté Supabase si ce n'est pas un programme purement local
        if (SelectedProgrammeSource is "auto" or "manuel")
        {
            supabaseOk = await SupabaseService.DeleteProgrammeUnifiedAsync(SelectedProgrammeId, SelectedProgrammeSource);
            Console.WriteLine($"Supabase suppression status : {supabaseOk}");
        }

        // ✅ Supprimer côté localStorage dans tous les cas
        var key = $"programme_{SelectedProgrammeId}";
        var keys = await LocalStorage.KeysAsync();
        if (keys.Contains(key))
        {
            await LocalStorage.RemoveItemAsync(key);
            Console.WriteLine($"Programme supprimé du localStorage : {key}");
            localOk = true;
        }

        if (supabaseOk || localOk)
        {
            Console.WriteLine("✅ Programme supprimé avec succès");

            // Reset affichage
            SelectedPlan = null;
            SelectedProgrammeId = Guid.Empty;
            SelectedProgrammeSource = "auto";
            Exercises.Clear();

            // 🔄 Rechargement propre
            var supabaseProgrammes = await SupabaseService.GetAllProgrammesForCurrentUserAsync();
            var locaux = await ChargerProgrammesLocauxAutoAsync();

            Programmes = supabaseProgrammes.Concat(locaux).DistinctBy(p => p.Id).ToList();

            StateHasChanged();
        }
        else
        {
            Console.WriteLine("❌ Échec suppression : aucune source supprimée");
        }
    }



    #endregion


    private string message = ""; // Affichage du message de succès ou erreur

    #region CHARGER SEANCE
    private void SetPoidsEtSale(ChangeEventArgs e, ExerciceJour ex)
    {
        if (double.TryParse(e.Value?.ToString(), out double val))
        {
            ex.PoidsAffiche = val; // ça déclenche le setter ⇒ isDirty
        }
    }
    private async Task ChargerSeance()
    {
        Exercises.Clear();

        if (SelectedPlan is null || SelectedSemaineIndex >= SelectedPlan.Weeks.Count)
            return;

        var week = SelectedPlan.Weeks[SelectedSemaineIndex];
        var jour = week.Days.FirstOrDefault(d => d.DayIndex == SelectedJourIndex);

        if (jour == null || jour.IsRest)
        {
            Exercises = new()
            {
                new ExerciceJour
                {
                    ExerciseName = "Repos",
                    Series = 0,
                    Repetitions = 0,
                    RestTimeSeconds = 0,
                    Objectif =0,
                    Pourcentage1RM = 0,
                    PoidsUtilisé = 0,
                    ObjectifAtteint = false,
                    IsLb = appState.AfficherEnLb,

                }
            };
        }
        else
        {
            var date = DateTime.Today;
            var localPoids = await PoidsService.GetAllLocalPoidsAsync();

            foreach (var ex in jour.Exercises)
            {

                var local = localPoids.FirstOrDefault(p =>
                    p.Exercice == ex.ExerciseName && p.Date.Date == date.Date);

                double? poids = local?.Poids;

                var mapped = ExerciseMapper.MapToExerciceJour(ex, appState.AfficherEnLb, poids);
                mapped.ObjectifAtteint = local?.ObjectifAtteint ?? false;
                mapped.IsLb = appState.AfficherEnLb;
                Exercises.Add(mapped);
            }
        }

        StateHasChanged();
    }

    private async Task<List<ProgrammeModel>> ChargerProgrammesLocauxAutoAsync()
    {
        var localProgrammes = new List<ProgrammeModel>();

        var keys = await LocalStorage.KeysAsync();
        var autoKeys = keys.Where(k => k.StartsWith("programme_"));

        foreach (var key in autoKeys)
        {
            try
            {
                var local = await LocalStorage.GetItemAsync<ProgrammeModelLocal>(key);
                if (local != null)
                {
                    localProgrammes.Add(new ProgrammeModel
                        {
                            Id = local.Id,
                            Nom = local.Nom,
                            DateDebut = local.DateDebut,
                            Contenu = local.Contenu,
                            Source = local.Source,
                            UserId = SupabaseService.GetCurrentUserId() ?? ""
                        });
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"❌ Lecture locale échouée pour {key} : {ex.Message}");
            }
        }

        return localProgrammes;
    }
    #endregion

    private async Task OnSessionTerminee()
    {
        await SaveEverything();
        if (Exercises.All(e => e.ObjectifAtteint))
        {
            await Gamification.AddXP(100, "Objectif atteint sur tous les exercices");
        }

        StateHasChanged();
    }

    private void MarquerAtteint(ExerciceJour ex)
    {
        //si le poids en livre
        //convertir en kg 


        // Conversion en kg si saisi en lb
        double poidsSaisiKg = ex.IsLb ? ex.PoidsAffiche * 0.453592 : ex.PoidsAffiche;

        // Calcul de l’objectif à partir du dernier poids connu (PoidsUtilisé est la référence)
       

        ex.ObjectifAtteint = poidsSaisiKg >= ex.Objectif;
        var local = new PoidsEntryLocal
            {
                Id = Guid.NewGuid(),
                Exercice = ex.ExerciseName,
                Date = DateTime.Today,
                Poids = poidsSaisiKg,
                UserId = userId ?? "",
                EnLb = ex.IsLb,
                ObjectifAtteint = ex.ObjectifAtteint
            };
        PoidsService.AddOrUpdateLocal(local);
        _ = CheckFireworks(); // 🔥 déclenche sans bloquer
    }

  
    /// <summary>
    /// Ajoute un pourcentage au poids de départ.
    /// Exemple : poids = 100, pourcentage = 2.5  → 102.5
    /// </summary>
    /// <param name="poids">Le poids de départ (double).</param>
    /// <param name="pourcentage">Le pourcentage à appliquer (double).</param>
    /// <returns>Le nouveau poids avec le pourcentage ajouté.</returns>
    private double calculerObjectif(double poidsUtilisé, double coef)
    {
        // 1 + (pourcentage / 100) donne le facteur multiplicatif
        double resultat = poidsUtilisé * (1 + coef / 100.0);
        return Math.Round(resultat, 1, MidpointRounding.AwayFromZero);// MidpointRounding.AwayFromZero      ↑
        // assure 1.25 → 1.3 plutôt que 1.2 si jamais vous êtes à mi‐chemin.
    }

    private void AppliquerModificationsDansSelectedPlan()
    {
        if (SelectedPlan is null) return;

        var semaine = SelectedPlan.Weeks[SelectedSemaineIndex];
        var jour = semaine.Days.FirstOrDefault(d => d.DayIndex == SelectedJourIndex);
        if (jour is null) return;

        // ⚠️ On écrase le contenu avec la version modifiée (sauf Repos)
        jour.Exercises = Exercises
            .Where(e => e.ExerciseName != "Repos")
            .Select(e => new ExerciseSession
                {
                    ExerciseName = e.ExerciseName,
                    Series = e.Series,
                    Repetitions = e.Repetitions,
                    RestTimeSeconds = e.RestTimeSeconds,
                    Pourcentage1RM = e.Pourcentage1RM,
                    IsSuperset = e.IsSuperset,
                })
            .ToList();
    }

    #region MARQUAGE SEANCE SEMAINE COMPLETE
    private void MarquerSeanceCommeComplete()
    {
        if (SelectedProgrammeId == Guid.Empty)
            return;

        string key = $"{SelectedProgrammeId}:{SelectedSemaineIndex}:{SelectedJourIndex}";

        if (!SeancesCompletes.Contains(key))
        {
            SeancesCompletes.Add(key);
            JS.InvokeVoidAsync("localStorage.setItem", "seancesCompletes", string.Join(",", SeancesCompletes));
        }
    }


    // private bool ExercisesJourComplete(int jourIndex)
    // {
    //     if (SelectedPlan is null || SelectedSemaineIndex >= SelectedPlan.Weeks.Count)
    //         return false;

    //     var jour = SelectedPlan.Weeks[SelectedSemaineIndex].Days.FirstOrDefault(d => d.DayIndex == jourIndex);
    //     if (jour == null || jour.IsRest) return true;

    //     return jour.Exercises.All(ex =>
    //         Exercises.Any(e => e.ExerciseName == ex.ExerciseName && e.ObjectifAtteint));
    // }

    // private bool ExercisesSemaineComplete(int semaineIndex, int jourIndex)
    // {
    //     if (SelectedPlan is null || semaineIndex >= SelectedPlan.Weeks.Count)
    //         return false;

    //     var semaine = SelectedPlan.Weeks[semaineIndex];
    //     var jour = semaine.Days.FirstOrDefault(d => d.DayIndex == jourIndex);
    //     if (jour == null || jour.IsRest) return true;

    //     return jour.Exercises.All(ex =>
    //         Exercises.Any(e => e.ExerciseName == ex.ExerciseName && e.ObjectifAtteint));
    // }
    private bool ExercisesJourComplete(int jourIndex)
    {
        string key = $"{SelectedProgrammeId}:{SelectedSemaineIndex}:{jourIndex}";
        return SeancesCompletes.Contains(key);
    }
    private bool ExercisesSemaineComplete(int semaineIndex, int jourIndex)
    {
        return Enumerable.Range(1, 7).All(j =>
            SeancesCompletes.Contains($"{SelectedProgrammeId}:{semaineIndex}:{j}"));
    }

    private void TrouverProchaineSeance()
    {
        if (SelectedPlan is null || SelectedProgrammeId == Guid.Empty)
            return;

        for (int semaineIndex = 0; semaineIndex < SelectedPlan.Weeks.Count; semaineIndex++)
        {
            var semaine = SelectedPlan.Weeks[semaineIndex];

            foreach (var jour in semaine.Days.OrderBy(d => d.DayIndex))
            {
                if (jour.IsRest) continue;

                string key = $"{SelectedProgrammeId}:{semaineIndex}:{jour.DayIndex}";
                if (!SeancesCompletes.Contains(key))
                {
                    SelectedSemaineIndex = semaineIndex;
                    SelectedJourIndex = jour.DayIndex;
                    return;
                }
            }
        }

        // ✅ Si tout est complété, rester à Semaine 0 / Jour 1
        SelectedSemaineIndex = 0;
        SelectedJourIndex = 1;
    }
   #endregion
}
