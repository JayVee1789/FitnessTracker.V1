@page "/view-session"
@using FitnessTracker.V1.Models
@using FitnessTracker.V1.Services
@using FitnessTracker.V1.Services.ProgrammeGeneration
@using System.Text.Json
@using static FitnessTracker.V1.Models.Model
@inject SupabaseService SupabaseService
@inject PoidsService PoidsService
@inject IJSRuntime JS

<h3>Visualiser une séance de programme</h3>

<div class="row mb-3">
    <div class="col-md-4">
        <label>Programme :</label>
        <select class="form-select" @onchange="OnProgrammeSelected">
            <option value="">-- Sélectionner --</option>
            @foreach (var prog in Programmes)
            {
                <option value="@prog.Id">@prog.Nom (@prog.DateDebut.ToShortDateString())</option>
            }
        </select>
    </div>

    @if (SelectedPlanAvailable)
    {
        <div class="col-md-4">
            <label>Semaine :</label>
            <select class="form-select" @onchange="OnSemaineChanged">
                @for (int i = 0; i < SelectedPlan?.Weeks.Count; i++)
                {
                    <option value="@i">Semaine @(i + 1)</option>
                }
            </select>
        </div>

        <div class="col-md-4">
            <label>Jour :</label>
            <select class="form-select" @onchange="OnJourChanged">
                @for (int j = 1; j <= 7; j++)
                {
                    <option value="@j">Jour @j</option>
                }
            </select>
        </div>
    }
</div>

@if (SelectedPlanAvailable)
{
    <div class="mb-3">
        <button class="btn btn-danger" data-bs-toggle="modal" data-bs-target="#confirmModal">
            Supprimer ce programme
        </button>
    </div>
}

@if (Exercises.Any())
{
    <h5 class="mt-3">Séance du programme sélectionné</h5>
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Exercice</th>
                <th>Séries</th>
                <th>Reps</th>
                <th>Repos (s)</th>
                <th>Poids</th>
                <th>% 1RM</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var ex in Exercises)
            {
                <tr>
                    <td><a href="#" @onclick="() => ProposerRemplacement(ex)">@ex.ExerciseName</a></td>
                    <td>@ex.Series</td>
                    <td>@ex.Repetitions</td>
                    <td>@ex.RestTimeSeconds</td>
                    <td>
                        <input type="number" class="form-control" step="0.5"
                               @bind="ex.PoidsUtilisé" />
                    </td>
                    <td>@ex.Pourcentage1RM%</td>
                    <td>
                        <button class="btn btn-sm btn-warning" @onclick="() => MarquerNonAtteint(ex)">Non atteint</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@if (SelectedPlanAvailable)
{
    <button class="btn btn-success" @onclick="SauvegarderSeance">
        Enregistrer les performances
    </button>
}

<!-- Modal de confirmation -->
<div class="modal fade" id="confirmModal" tabindex="-1" aria-labelledby="confirmModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header bg-danger text-white">
                <h5 class="modal-title" id="confirmModalLabel">Confirmer la suppression</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Fermer"></button>
            </div>
            <div class="modal-body">
                Êtes-vous sûr de vouloir supprimer ce programme ? Cette action est irréversible.
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Annuler</button>
                <button type="button" class="btn btn-danger" @onclick="ConfirmerSuppression">Oui, supprimer</button>
            </div>
        </div>
    </div>
</div>

@code {
    private List<ProgrammeModel> Programmes = new();
    private WorkoutPlan? SelectedPlan;
    private Guid SelectedProgrammeId;
    private string SelectedProgrammeSource = "auto";
    private int SelectedSemaineIndex = 0;
    private int SelectedJourIndex = 1;
    private List<ExerciceJour> Exercises = new();

    private bool SelectedPlanAvailable => SelectedPlan is not null;

    protected override async Task OnInitializedAsync()
    {
        Programmes = await SupabaseService.GetAllProgrammesAsync();
    }

    private async Task OnProgrammeSelected(ChangeEventArgs e)
    {
        Exercises.Clear();
        var value = e.Value?.ToString();
        if (Guid.TryParse(value, out var id))
        {
            var selectedProgramme = Programmes.FirstOrDefault(p => p.Id == id);

            if (selectedProgramme is not null)
            {
                SelectedProgrammeId = id;
                SelectedProgrammeSource = selectedProgramme.Source;
                SelectedPlan = JsonSerializer.Deserialize<WorkoutPlan>(selectedProgramme.Contenu);
                SelectedSemaineIndex = 0;
                SelectedJourIndex = 1;
                await ChargerSeance();
            }
        }
    }

    private async Task OnSemaineChanged(ChangeEventArgs e)
    {
        SelectedSemaineIndex = int.Parse(e.Value?.ToString() ?? "0");
        await ChargerSeance();
    }

    private async Task OnJourChanged(ChangeEventArgs e)
    {
        SelectedJourIndex = int.Parse(e.Value?.ToString() ?? "1");
        await ChargerSeance();
    }

    private async Task ChargerSeance()
    {
        Exercises.Clear();

        if (SelectedPlan is null || SelectedSemaineIndex >= SelectedPlan.Weeks.Count)
            return;

        var week = SelectedPlan.Weeks[SelectedSemaineIndex];
        var jour = week.Days.FirstOrDefault(d => d.DayIndex == SelectedJourIndex);

        if (jour == null || jour.IsRest)
        {
            Exercises = new()
            {
                new ExerciceJour
                {
                    ExerciseName = "Repos",
                    Series = 0,
                    Repetitions = 0,
                    RestTimeSeconds = 0,
                    Pourcentage1RM = 0,
                    PoidsUtilisé = 0
                }
            };
        }
        else
        {
            foreach (var ex in jour.Exercises)
            {
                double lastPoids = await PoidsService.GetLastPoidsForExerciceAsync(ex.ExerciseName);

                Exercises.Add(new ExerciceJour
                    {
                        ExerciseName = ex.ExerciseName,
                        Series = ex.Series,
                        Repetitions = ex.Repetitions,
                        RestTimeSeconds = ex.RestTimeSeconds,
                        Pourcentage1RM = ex.Pourcentage1RM,
                        PoidsUtilisé = lastPoids
                    });
            }
        }

        StateHasChanged();
    }

    private void MarquerNonAtteint(ExerciceJour ex)
    {
        Console.WriteLine($"NON ATTEINT: {ex.ExerciseName}");
    }

    private void ProposerRemplacement(ExerciceJour ex)
    {
        Console.WriteLine($"REMPLACEMENT demandé pour : {ex.ExerciseName}");
    }

    private async Task SauvegarderSeance()
    {
        foreach (var ex in Exercises)
        {
            if (ex.ExerciseName == "Repos") continue;

            var entry = new PoidsEntry
                {
                    Exercice = ex.ExerciseName,
                    Date = DateTime.Today,
                    Poids = ex.PoidsUtilisé
                };

            await PoidsService.AddEntryAsync(entry);
        }

        Console.WriteLine("Performances sauvegardées ✅");
    }

    private async Task ConfirmerSuppression()
    {
        var modal = await JS.InvokeAsync<IJSObjectReference>("bootstrap.Modal.getInstance", "#confirmModal");
        await modal.InvokeVoidAsync("hide");

        if (SelectedProgrammeId != Guid.Empty)
        {
            var success = await SupabaseService.DeleteProgrammeUnifiedAsync(SelectedProgrammeId, SelectedProgrammeSource);

            if (success)
            {
                // Réinitialisation complète
                SelectedPlan = null;
                SelectedProgrammeId = Guid.Empty;
                SelectedProgrammeSource = "auto";
                Exercises.Clear();

                Programmes = await SupabaseService.GetAllProgrammesAsync();

                // Forcer le rendu
                StateHasChanged();
            }
        }
    }


    public class ExerciceJour
    {
        public string ExerciseName { get; set; } = "";
        public int Series { get; set; }
        public int Repetitions { get; set; }
        public int RestTimeSeconds { get; set; }
        public double Pourcentage1RM { get; set; }
        public double PoidsUtilisé { get; set; }
    }
}
