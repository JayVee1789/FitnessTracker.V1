@page "/view-session"
@using FitnessTracker.V1.Models
@using FitnessTracker.V1.Services
@using FitnessTracker.V1.Helper
@using FitnessTracker.V1.Services.ProgrammeGeneration
@using System.Text.Json
@using static FitnessTracker.V1.Models.Model
@* @using Progress = FitnessTracker.V1.Components.ProgressBar *@
@using static FitnessTracker.V1.Components.SessionProgressBar
@inject SupabaseService2 SupabaseService
@inject PoidsService PoidsService
@inject IJSRuntime JS
@inject NavigationManager Nav
@inject AuthService AuthService
@inject HttpClient Http
@inject ViewSessionHelper viewSessionHelper

@code {
    private string progress => SelectedPlan?.TotalWeeks > 0
        ? Math.Min(100, Math.Round((SelectedSemaineIndex * 7 + SelectedJourIndex) * 100.0 / (SelectedPlan.TotalWeeks * 7))) + "%"
        : "0%";

    private int ExercicesCompletes() =>
   Exercises.Count(e => e.ObjectifAtteint && e.ExerciseName != "Repos");

    private int ExercicesTotales() =>
        Exercises.Count(e => e.ExerciseName != "Repos");

    private async Task CheckFireworks()
    {
        if (ExercicesTotales() > 0 && ExercicesCompletes() == ExercicesTotales())
        {
            await JS.InvokeVoidAsync("launchFireworks");
        }
    }
}



<div class="session-header">
    Session du Jour 💪
</div>


<SessionProgressBar Completed="@ExercicesCompletes()" TotalDone="@ExercicesTotales()" />


@if (ExercicesTotales() > 0 && ExercicesCompletes() == ExercicesTotales())
{
    <div>
        <script>
            await JS.InvokeVoidAsync("launchFireworks");
        </script>
    </div>
}


<!-- Sélecteurs Programme/Semaine/Jour -->
<div class="row gy-2 gx-3 mb-4 px-3">
    <div class="col-12 col-md-4">
        <label class="form-label text-white">Programme : </label>
        @if (SelectedPlan is not null)
        {



            <button class="duo-icon-btn-small text-danger ms-2"
            title="Supprimer ce programme"
            data-bs-toggle="modal"
            data-bs-target="#confirmModal">
                🗑️
            </button>

        }
        <select class="form-select rounded-pill" @onchange="OnProgrammeSelected">
            <option value="">-- Sélectionner --</option>
            @foreach (var prog in Programmes)
            {
                <option value="@prog.Id">@prog.Nom (@prog.DateDebut.ToShortDateString())</option>
            }
        </select>
    </div>

    @if (SelectedPlanAvailable)
    {
        <div class="col-6 col-md-4">
            <label class="form-label text-white">Semaine :</label>
            <select class="form-select rounded-pill" @onchange="OnSemaineChanged">
                @for (int i = 0; i < SelectedPlan?.Weeks.Count; i++)
                {
                    bool semaineComplete = SelectedPlan.Weeks[i].Days.All(day =>
                    day.IsRest || ExercisesSemaineComplete(i, day.DayIndex));

                    <option value="@i" class="@(semaineComplete ? "completed-option" : "")">
                        Semaine @(i + 1)
                    </option>
                }
            </select>
        </div>

        <div class="col-6 col-md-4">
            <label class="form-label text-white">Jour :</label>
            <select class="form-select rounded-pill" @onchange="OnJourChanged">
                @for (int j = 1; j <= 7; j++)
                {
                    bool jourComplete = ExercisesJourComplete(j);

                    <option value="@j" class="@(jourComplete ? "completed-option" : "")">
                        Jour @j
                    </option>
                }
            </select>
        </div>
    }
</div>

@if (SelectedPlanAvailable)
{
    <div class="unit-toggle">
        <button @onclick="ToggleUnite">
            Affichage : @(AfficherEnLb ? "lb" : "kg")
        </button>
    </div>
}

@if (Exercises.Any())
{
    <div class="d-flex flex-column gap-3 px-3">
        @foreach (var ex in Exercises)
        {
            <div class="duo-card @(ex.ObjectifAtteint ? "objectif-atteint" : "")">

                <div class="flex-1">
                    <div class="duo-title">
                        <span class="duo-title-text">@ex.ExerciseName</span>
                        <a class="duo-video-icon" href="@($"https://www.youtube.com/results?search_query={ex.ExerciseName}+exercise")"
                        target="_blank" title="Voir la vidéo">🎥</a>
                        <button class="duo-icon-btn" data-bs-toggle="modal" data-bs-target="#modalRemplacement"
                        @onclick="() => ProposerRemplacement(ex)" title="Changer d’exercice">
                            🔁
                        </button>
                    </div>

                    <div class="duo-info">@ex.Series série(s) de @ex.Repetitions répétition(s) – Repos : @ex.RestTimeSeconds s</div>
                    <div class="duo-info">Charge : @ex.Pourcentage1RM % 1RM</div>

                    <div class="input-group mt-3" style="max-width: 120px;">
                        <input type="number" class="form-control form-control-sm rounded-pill text-center"
                        step="0.5" @bind="ex.PoidsAffiche" />
                        <span class="input-group-text bg-light border-0">@((ex.IsLb ? "lb" : "kg"))</span>
                    </div>

                    <div class="duo-objectif mt-2">
                        🎯 <strong>Objectif : @(AfficherEnLb ? $"{Math.Round(ex.Objectif / 0.453592, 1)} lb" : $"{Math.Round(ex.Objectif, 1)} kg")</strong>
                    </div>
                </div>

                <button class="checkmark" @onclick="() => MarquerAtteint(ex)">
                    ✔️
                </button>
            </div>




        }
    </div>

    <div class="text-center mt-4">
        <button class="duo-btn px-5 py-2 fs-5" @onclick="OnSessionTerminee">
            Session terminée 🎉
        </button>
    </div>

    <div class="motiv-message">
        Continue comme ça ! Tu vas tout déchirer 💥
    </div>
}

@if (!Exercises.Any())
{
    <div class="alert alert-light text-center m-3">
        Aucune séance sélectionnée.
    </div>
}

@code {
    private void OnSessionTerminee()
    {
        SaveEverything();
        /* Nav.NavigateTo("/view-session", forceLoad: true); */
    }
}

<!-- -------------------------------------------------------------
     SECTION 4 : Modales (confirmation suppression + remplacement)
-------------------------------------------------------------- -->
<!-- Modal confirmation suppression -->
<div class="modal fade" id="confirmModal" tabindex="-1" aria-labelledby="confirmModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header bg-danger text-white">
                <h5 class="modal-title" id="confirmModalLabel">Confirmer la suppression</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                Êtes-vous sûr de vouloir supprimer ce programme&nbsp;?
            </div>
            <div class="modal-footer">
                <button class="btn btn-secondary" data-bs-dismiss="modal">Annuler</button>
                <button class="btn btn-danger" @onclick="ConfirmerSuppression">Oui, supprimer</button>
            </div>
        </div>
    </div>
</div>

<!-- Modal remplacement exercice -->
<div class="modal fade" id="modalRemplacement" tabindex="-1" aria-labelledby="modalRemplacementLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content duo-modal">
            <div class="modal-header bg-info text-white">
                <h5 class="modal-title fw-bold" id="modalRemplacementLabel">🔁 Remplacer l'exercice</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                @if (ExerciceCible is not null)
                {
                    <p><strong>Actuel :</strong> @ExerciceCible.ExerciseName</p>
                    <p>Suggestions :</p>
                    @foreach (var s in Suggestions)
                    {
                        <div class="d-flex justify-content-between align-items-center mb-3 px-2">
                            <span class="fw-bold">@s</span>
                            <button class="duo-btn-mini" data-bs-dismiss="modal" @onclick="() => ConfirmerRemplacement(s)">
                                ✅ Choisir
                            </button>
                        </div>
                    }
                }
            </div>
        </div>
    </div>
</div>


@* -------------------------------------------------------------
   SECTION 5 : Code C# (inchangé sauf suffix & mobile tweaks)
------------------------------------------------------------- *@



@code {
    private List<ProgrammeModel> Programmes = new();
    private WorkoutPlan? SelectedPlan;
    private Guid SelectedProgrammeId;
    private string SelectedProgrammeSource = "auto";
    private int SelectedSemaineIndex = 0;
    private int SelectedJourIndex = 1;
    private List<ExerciceJour> Exercises = new();
    private DateTime SelectedProgrammeDate = DateTime.Today;
    public static bool AfficherEnLb { get; set; } = false;
    private ExerciceJour? ExerciceCible = null;
    private List<string> Suggestions = new();
    private string? userId;
    private string GetInputId(ExerciceJour ex) => $"{ex.ExerciseName}_{Guid.NewGuid()}";
    List<ExerciseDefinition> allExercises = new();
    private bool SelectedPlanAvailable => SelectedPlan is not null;
    private List<string> SeancesCompletes = new(); // ex: "progId:sem:jour"




    protected override async Task OnInitializedAsync()
    {
        if (!AuthService.IsAuthenticated)
        {
            Nav.NavigateTo("/login", forceLoad: true);
            return;
        }

        try
        {
            userId = SupabaseService.GetCurrentUserId();
            Console.WriteLine("🔑 Utilisateur actuel : " + userId);
            var data = await JS.InvokeAsync<string>("localStorage.getItem", "seancesCompletes");
            if (!string.IsNullOrEmpty(data))
            {
                SeancesCompletes = data.Split(',').ToList();
            }
            // 🔄 Tente une synchro silencieuse sans casser la suite
            // await PoidsService.SyncFromSupabaseAsync();
            var supabaseEntries = await SupabaseService.GetEntriesAsync();
            await PoidsService.OverwriteEntriesAsync(supabaseEntries);
            Console.WriteLine($"✅ Synchro initiale : {supabaseEntries.Count} entrées chargées.");
        }
        catch (Exception ex)
        {
            Console.WriteLine("Erreur de synchro Supabase → localStorage : " + ex.Message);
            // Optionnel : afficher une alerte ou logger
        }

        // ✅ Chargement des programmes comme avant
        Programmes = await SupabaseService.GetAllProgrammesAsync();
    }

    private async Task OnProgrammeSelected(ChangeEventArgs e)
    {
        Exercises.Clear();
        var value = e.Value?.ToString();
        if (Guid.TryParse(value, out var id))
        {
            var selectedProgramme = Programmes.FirstOrDefault(p => p.Id == id);

            if (selectedProgramme is not null)
            {
                SelectedProgrammeId = id;
                SelectedProgrammeSource = selectedProgramme.Source;
                SelectedPlan = JsonSerializer.Deserialize<WorkoutPlan>(selectedProgramme.Contenu);
                SelectedProgrammeDate = selectedProgramme.DateDebut;

                SelectedSemaineIndex = 0;
                SelectedJourIndex = 1;
                await ChargerSeance();
            }
        }
    }

    private async Task OnSemaineChanged(ChangeEventArgs e)
    {
        SelectedSemaineIndex = int.Parse(e.Value?.ToString() ?? "0");
        await ChargerSeance();
    }

    private async Task OnJourChanged(ChangeEventArgs e)
    {
        SelectedJourIndex = int.Parse(e.Value?.ToString() ?? "1");
        await ChargerSeance();
    }


    private async Task ChargerSeance()
    {
        Exercises.Clear();

        if (SelectedPlan is null || SelectedSemaineIndex >= SelectedPlan.Weeks.Count)
            return;

        var week = SelectedPlan.Weeks[SelectedSemaineIndex];
        var jour = week.Days.FirstOrDefault(d => d.DayIndex == SelectedJourIndex);

        if (jour == null || jour.IsRest)
        {
            Exercises = new()
            {
                new ExerciceJour
                {
                    ExerciseName = "Repos",
                    Series = 0,
                    Repetitions = 0,
                    RestTimeSeconds = 0,
                    Objectif =0,
                    Pourcentage1RM = 0,
                    PoidsUtilisé = 0,
                    ObjectifAtteint = false,
                    IsLb = false
                }
            };
        }
        else
        {
            var date = DateTime.Today;
            var localPoids = await PoidsService.GetAllLocalPoidsAsync();

            foreach (var ex in jour.Exercises)
            {
                // chercher poids correspondant à l’exercice à la bonne date
                var local = localPoids.FirstOrDefault(p =>
                    p.Exercice == ex.ExerciseName && p.Date.Date == date.Date);

                double poids = local?.Poids ?? 0;
                double facteurObjectif = 1 + (ex.Pourcentage1RM / 100.0);
                double objectif = poids * facteurObjectif;
                //remettre cette variable dans grace au profil 
                double coef = 2.5;
                double pourcentageRm = calculerObjectif(poids, coef);

                Exercises.Add(new ExerciceJour
                    {
                        ExerciseName = ex.ExerciseName,
                        Series = ex.Series,
                        Repetitions = ex.Repetitions,
                        RestTimeSeconds = ex.RestTimeSeconds,
                        Objectif = calculerObjectif(poids, coef),
                        Pourcentage1RM = pourcentageRm,
                        PoidsUtilisé = poids,
                        ObjectifAtteint = false,
                        IsLb = AfficherEnLb // ✅ ajout important ici

                    });
            }
        }

        StateHasChanged();
    }


    private void MarquerAtteint(ExerciceJour ex)
    {
        // Conversion en kg si saisi en lb
        double poidsSaisiKg = ex.IsLb ? ex.PoidsUtilisé * 0.453592 : ex.PoidsUtilisé;

        // Calcul de l’objectif à partir du dernier poids connu (PoidsUtilisé est la référence)
        double objectifKg = ex.Objectif * (1 + ex.Pourcentage1RM / 100.0);

        ex.ObjectifAtteint = poidsSaisiKg >= objectifKg;

        _ = CheckFireworks(); // 🔥 déclenche sans bloquer
    }

    private void UpdatePoids(ChangeEventArgs e, ExerciceJour ex)
    {
        if (double.TryParse(e.Value?.ToString(), out double val))
        {
            // Toujours stocker en kg
            ex.PoidsUtilisé = AfficherEnLb ? val * 0.453592 : val;
        }
    }

    private async Task SauvegarderProgrammeModifié()
    {
        if (SelectedPlan is null || SelectedProgrammeId == Guid.Empty)
            return;

        try
        {
            var programme = Programmes.FirstOrDefault(p => p.Id == SelectedProgrammeId);
            if (programme is not null)
            {
                programme.Contenu = JsonSerializer.Serialize(SelectedPlan);
                var success = await SupabaseService.UpdateProgrammeUnifiedAsync(programme);

                if (success)
                {
                    Console.WriteLine("✅ Programme mis à jour avec succès.");
                }
                else
                {
                    Console.WriteLine("❌ Erreur lors de la mise à jour du programme.");
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"❌ Exception durant la mise à jour du programme : {ex.Message}");
        }
    }


    private async Task ProposerRemplacement(ExerciceJour ex)
    {
        ExerciceCible = ex;
        var version = DateTime.Now.Ticks;
        allExercises = await Http.GetFromJsonAsync<List<ExerciseDefinition>>($"data/ExercicesListeLocal.json?v={version}") ?? new();
        var original = allExercises.FirstOrDefault(e => e.Name == ex.ExerciseName);
        if (original == null)
        {
            Console.WriteLine("⚠️ Exercice source introuvable dans la base.");
            Suggestions = new(); return;
        }

        string baseCategory = original.Category?.Split('/').FirstOrDefault()?.Trim() ?? "";

        Suggestions = allExercises
            .Where(e =>
                e.Name != original.Name &&
                e.Origin == original.Origin &&
                e.Description == original.Description &&
                e.Category.StartsWith(baseCategory, StringComparison.OrdinalIgnoreCase))
            .OrderBy(_ => Guid.NewGuid())
            .Select(e => e.Name)
            .Take(2)
            .ToList();

        Console.WriteLine($"🔁 Suggestions trouvées pour {original.Name} : {string.Join(", ", Suggestions)}");
    }


    private async Task ConfirmerRemplacement(string nouveau)
    {
        if (ExerciceCible is null || SelectedPlan is null) return;

        //  Mémoriser l'ancien nom AVANT le remplacement
        string ancienNom = ExerciceCible.ExerciseName;

        //  Remplacer dans la séance affichée
        ExerciceCible.ExerciseName = nouveau;

        //  Remplacer aussi dans le plan du programme (WorkoutPlan)
        var semaine = SelectedPlan.Weeks.ElementAtOrDefault(SelectedSemaineIndex);
        var jour = semaine?.Days.FirstOrDefault(d => d.DayIndex == SelectedJourIndex);

        var exOriginal = jour?.Exercises.FirstOrDefault(e => e.ExerciseName == ancienNom);
        if (exOriginal is not null)
        {
            exOriginal.ExerciseName = nouveau;
        }

        try
        {
            // ✅ Sauvegarder le programme modifié après remplacement
            await SauvegarderProgrammeModifié();
            Console.WriteLine("✅ Programme mis à jour après remplacement.");
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }


        ExerciceCible = null;
        StateHasChanged();
    }

    private async Task RemplacerExercice(string nouveau)
    {
        if (ExerciceCible is null)
            return;

        ExerciceCible.ExerciseName = nouveau;
        ExerciceCible = null;

        // await JS.InvokeVoidAsync("hideModal", "modalRemplacement");
        // 👉 Pas de await → compatible Hot Reload
        JS.InvokeVoidAsync("hideModal", "modalRemplacement").AsTask();
        StateHasChanged();
    }


    private async Task SauvegarderSeance()
    {
        foreach (var ex in Exercises)
        {
            if (ex.ExerciseName == "Repos") continue;

            // ⚠️ Utiliser IsLb (pas AfficherEnLb)
            var poidsKg = ex.IsLb ? ex.PoidsUtilisé * 0.453592 : ex.PoidsUtilisé;

            var entry = new PoidsEntry
                {
                    Exercice = ex.ExerciseName,
                    Date = DateTime.Today,
                    Poids = poidsKg,
                    UserId = userId,
                    EnLb  = ex.IsLb
                };

            var local = new PoidsEntryLocal
                {
                    Exercice = ex.ExerciseName,
                    Date = DateTime.Today,
                    Poids = poidsKg,
                    UserId = userId,
                    EnLb = ex.IsLb
                };

            try
            {
                // 🔁 méthode unifiée pour gérer doublons + synchro
                await PoidsService.SaveEntryUnifiedAsync(entry, local);
                Console.WriteLine($"✅ Entrée sauvegardée : {entry.Exercice} - {entry.Poids} kg");
            }
            catch (Exception exerer)
            {
                Console.WriteLine("❌ Erreur sauvegarde : " + exerer.Message);
            }
        }

        // 🔄 Sauvegarde le programme aussi
        await SauvegarderProgrammeModifié();
        Console.WriteLine("✅ Séance et programme sauvegardés avec succès.");
    }

    private string message = ""; // Affichage du message de succès ou erreur




    private async Task ConfirmerSuppression()
    {
        var modal = await JS.InvokeAsync<IJSObjectReference>("bootstrap.Modal.getInstance", "#confirmModal");
        await modal.InvokeVoidAsync("hide");

        if (SelectedProgrammeId != Guid.Empty)
        {
            var success = await SupabaseService.DeleteProgrammeUnifiedAsync(SelectedProgrammeId, SelectedProgrammeSource);

            if (success)
            {
                // Réinitialisation complète
                SelectedPlan = null;
                SelectedProgrammeId = Guid.Empty;
                SelectedProgrammeSource = "auto";
                Exercises.Clear();

                Programmes = await SupabaseService.GetAllProgrammesAsync();

                // Forcer le rendu
                StateHasChanged();
            }
        }
    }


    private double ConvertToDisplayUnit(double poidsKg) =>
    AfficherEnLb ? Math.Round(poidsKg / 0.453592, 1) : poidsKg;


    private double ConvertToKg(double valeurAffichee) =>
        AfficherEnLb ? Math.Round(valeurAffichee * 0.453592, 2) : valeurAffichee;


    private void OnPoidsChanged(string? valueStr, ExerciceJour ex)
    {
        if (double.TryParse(valueStr, out double val))
        {
            ex.PoidsUtilisé = ConvertToKg(val);
        }
    }


    private double GetDisplayPoids(ExerciceJour ex)
    {
        return AfficherEnLb ? Math.Round(ex.PoidsUtilisé / 0.453592, 1) : Math.Round(ex.PoidsUtilisé, 1);
    }

    private void SetDisplayPoids(ChangeEventArgs e, ExerciceJour ex)
    {
        if (double.TryParse(e.Value?.ToString(), out double val))
        {
            ex.PoidsUtilisé = AfficherEnLb ? val * 0.453592 : val;
        }
    }

    private async void ToggleUnite()
    {
        AfficherEnLb = !AfficherEnLb;

        foreach (var ex in Exercises)        // 2) on reflète le choix
            ex.IsLb = AfficherEnLb;

        StateHasChanged();
    }


    /// <summary>
    /// Ajoute un pourcentage au poids de départ.
    /// Exemple : poids = 100, pourcentage = 2.5  → 102.5
    /// </summary>
    /// <param name="poids">Le poids de départ (double).</param>
    /// <param name="pourcentage">Le pourcentage à appliquer (double).</param>
    /// <returns>Le nouveau poids avec le pourcentage ajouté.</returns>
    private double calculerObjectif(double poidsUtilisé, double coef)
    {
        // 1 + (pourcentage / 100) donne le facteur multiplicatif
        double resultat = poidsUtilisé * (1 + coef / 100.0);
        return Math.Round(resultat, 1, MidpointRounding.AwayFromZero);// MidpointRounding.AwayFromZero      ↑
        // assure 1.25 → 1.3 plutôt que 1.2 si jamais vous êtes à mi‐chemin.
    }

    private double GetPoidsAffiché(ExerciceJour ex) =>
    AfficherEnLb ? Math.Round(ex.PoidsUtilisé / 0.453592, 1) : Math.Round(ex.PoidsUtilisé, 1);

    private void SetPoidsAffiché(ExerciceJour ex, string? val)
    {
        if (double.TryParse(val, out double result))
            ex.PoidsUtilisé = AfficherEnLb ? Math.Round(result * 0.453592, 2) : result;
    }
    private bool HasPerformanceChanged() => Exercises.Any(e => e.IsDirty);

    private async Task SaveEverything()
    {
        if (HasPerformanceChanged())
        {
            await SauvegarderSeance();          // ← enregistre Poids + programme
            foreach (var ex in Exercises) ex.AcceptChanges();
        }
        else
        {
            await SauvegarderProgrammeModifié(); // ← programme seul
        }
        MarquerSeanceCommeComplete();
        await JS.InvokeVoidAsync("showToast", "✅ Données enregistrées");
    }

    private void MarquerSeanceCommeComplete()
    {
        if (SelectedProgrammeId == Guid.Empty)
            return;

        string key = $"{SelectedProgrammeId}:{SelectedSemaineIndex}:{SelectedJourIndex}";

        if (!SeancesCompletes.Contains(key))
        {
            SeancesCompletes.Add(key);
            JS.InvokeVoidAsync("localStorage.setItem", "seancesCompletes", string.Join(",", SeancesCompletes));
        }
    }


    // private bool ExercisesJourComplete(int jourIndex)
    // {
    //     if (SelectedPlan is null || SelectedSemaineIndex >= SelectedPlan.Weeks.Count)
    //         return false;

    //     var jour = SelectedPlan.Weeks[SelectedSemaineIndex].Days.FirstOrDefault(d => d.DayIndex == jourIndex);
    //     if (jour == null || jour.IsRest) return true;

    //     return jour.Exercises.All(ex =>
    //         Exercises.Any(e => e.ExerciseName == ex.ExerciseName && e.ObjectifAtteint));
    // }

    // private bool ExercisesSemaineComplete(int semaineIndex, int jourIndex)
    // {
    //     if (SelectedPlan is null || semaineIndex >= SelectedPlan.Weeks.Count)
    //         return false;

    //     var semaine = SelectedPlan.Weeks[semaineIndex];
    //     var jour = semaine.Days.FirstOrDefault(d => d.DayIndex == jourIndex);
    //     if (jour == null || jour.IsRest) return true;

    //     return jour.Exercises.All(ex =>
    //         Exercises.Any(e => e.ExerciseName == ex.ExerciseName && e.ObjectifAtteint));
    // }
    private bool ExercisesJourComplete(int jourIndex)
    {
        string key = $"{SelectedProgrammeId}:{SelectedSemaineIndex}:{jourIndex}";
        return SeancesCompletes.Contains(key);
    }
    private bool ExercisesSemaineComplete(int semaineIndex, int jourIndex)
    {
        return Enumerable.Range(1, 7).All(j =>
            SeancesCompletes.Contains($"{SelectedProgrammeId}:{semaineIndex}:{j}"));
    }


    
}
