@page "/generate-programme"
@using Blazored.LocalStorage
@using FitnessTracker.V1.Models
@using FitnessTracker.V1.Models.Enumeration
@using FitnessTracker.V1.Services.ProgrammeGeneration.ProgrammeClassic
@inject ProgrammeGeneratorService Generator
@inject HttpClient Http
@inject SupabaseService2 SupabaseService
@inject NavigationManager Nav
@inject AuthService AuthService
@inject Supabase.Client Supabase
@inject ProfileService profileService
@inject PoidsService poidsService
@inject Blazored.LocalStorage.ILocalStorageService Blazored


<div class="mobile-container app-main">
    <h2 class="session-header text-center mb-4">💪 Programme généré</h2>

    @if (plan == null)
    {
        <p class="text-center"><em>Chargement du programme...</em></p>
    }
    else
    {
        @foreach (var week in plan.Weeks)
        {
            <div class="duo-card mb-4">
                <div class="w-100">
                    <div class="duo-title mb-2">
                        <span class="duo-title-text">Semaine @week.WeekNumber</span>
                        @*  <span class="ms-auto text-muted">+@week.ChargeIncrementPercent% charge</span> *@
                    </div>

                    @*   <div class="duo-info mb-2">
                        Séries: <strong>@week.SeriesWeek</strong> • Reps: <strong>@week.RepetitionsWeek</strong> • Repos: <strong>@week.RestTimeWeek</strong> sec
                    </div> *@

                    @foreach (var day in week.Days.OrderBy(d => d.DayIndex))
                    {
                        <div class="mb-3">
                            <div class="duo-title">
                                Jour @day.DayIndex
                                @if (day.IsRest)
                                {
                                    <span class="ms-auto text-muted">Repos</span>
                                }
                            </div>

                            @if (!day.IsRest)
                            {
                                <ul class="list-group list-group-flush">
                                    @foreach (var ex in day.Exercises)
                                    {
                                        <li class="list-group-item d-flex justify-content-between align-items-start">
                                            <div>
                                                <strong>@ex.ExerciseName</strong>
                                                @{
                                                    if (derniersPoids.TryGetValue(ex.ExerciseName, out var poids) && poids.HasValue)
                                                    {
                                                        <span title="Poids précédent"> ⭐️ @($"{poids.Value} kg")</span>
                                                    }
                                                }
                                                <br />
                                                <small class="text-muted">
                                                    (@ex.Series × @ex.Repetitions | @ex.RestTimeSeconds s | @ex.Pourcentage1RM% 1RM
                                                    @(ex.IsSuperset ? "| Superset" : ""))
                                                </small>
                                            </div>
                                        </li>
                                    }
                                </ul>
                            }
                        </div>
                    }
                </div>
            </div>
        }

        <div class="text-center">
            <button class="duo-btn mt-3" @onclick="OpenSaveModal">📥 Enregistrer ce programme</button>
        </div>
    }

    @if (showModal)
    {
        <div class="modal fade show d-block" tabindex="-1" style="background:rgba(0,0,0,.5);">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Nom du programme</h5>
                        <button type="button" class="btn-close" @onclick="CloseModal"></button>
                    </div>

                    <div class="modal-body">
                        <label class="form-label">Veuillez saisir un nom :</label>
                        <input class="form-control" @bind="newProgrammeName" />
                    </div>

                    <div class="modal-footer">
                        <button class="btn btn-secondary" @onclick="CloseModal">Annuler</button>
                        <button class="btn btn-primary" @onclick="ConfirmSaveAsync">Enregistrer</button>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private WorkoutPlan? plan;
    private List<ExerciseDefinition> exerciseList = new();
    private Dictionary<string, double?> derniersPoids = new();
    private bool showModal = false;
    private string newProgrammeName = "Programme glute focus";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            exerciseList = await Http.GetFromJsonAsync<List<ExerciseDefinition>>("data/ExercicesListeLocal.json") ?? new();
        }
        catch (Exception ex)
        {
            Console.WriteLine("Erreur chargement JSON exercices : " + ex.Message);
        }

        var profile = await profileService.GetOrCreateUserProfileAsync();
        var strategy = PickProgrammeStrategy(profile);
        plan = Generator.Generate(strategy, profile, exerciseList);

        // Précharger les poids connus pour les exercices
        var nomsExercices = plan.Weeks
            .SelectMany(w => w.Days)
            .Where(d => !d.IsRest)
            .SelectMany(d => d.Exercises)
            .Select(e => e.ExerciseName)
            .Distinct();

        foreach (var nom in nomsExercices)
        {
            var poids = await poidsService.GetLastPoidsForExerciceAsync(nom);
            derniersPoids[nom] = poids > 0 ? poids : null;
        }

    }

    private void OpenSaveModal()
    {
        newProgrammeName = $"Programme {DateTime.Today:dd/MM}-{plan?.TotalWeeks}w";
        showModal = true;
    }

    private void CloseModal() => showModal = false;

    private async Task ConfirmSaveAsync()
    {
        if (plan == null) return;

        await EnregistrerProgrammeAsync(plan, newProgrammeName);
        CloseModal();
    }

    private async Task EnregistrerProgrammeAsync(WorkoutPlan planToSave, string nom)
    {
        if (!AuthService.IsAuthenticated)
        {
            Nav.NavigateTo("/login");
            return;
        }

        var id = Guid.NewGuid();
        var contenuJson = JsonSerializer.Serialize(planToSave);

        // 1️⃣ Modèle principal pour Supabase
        var model = new ProgrammeModel
            {
                Id = id,
                Nom = nom,
                DateDebut = DateTime.Today,
                Contenu = contenuJson,
                UserId = Supabase.Auth.CurrentUser?.Id ?? "",
                Source = "auto"
            };

        // 2️⃣ Version locale sans attribut bloquant
        var localModel = new ProgrammeModelLocal
            {
                Id = id,
                Nom = nom,
                DateDebut = DateTime.Today,
                Contenu = contenuJson,
                Source = "auto"
            };

        try
        {
            // 💾 Sauvegarde locale propre
            await Blazored.SetItemAsync($"programme_{id}", localModel);
            Console.WriteLine($"✅ Programme auto stocké localement : programme_{id}");

            // ☁️ Sauvegarde dans Supabase
            bool ok = await SupabaseService.SaveProgrammeAsync(model, isManual: false);

            if (ok)
            {
                Console.WriteLine("✅ Programme enregistré dans Supabase");
                Nav.NavigateTo("/view-prog");
            }
            else
            {
                Console.WriteLine("❌ Échec sauvegarde Supabase.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("❌ Exception EnregistrementProgrammeAsync : " + ex.Message);
        }
    }

    public static string PickProgrammeStrategy(UserProfile p)
    {
        if (!string.IsNullOrWhiteSpace(p.PriorityMuscle) &&
            p.PriorityMuscle.Contains("glute", StringComparison.OrdinalIgnoreCase))
            return "GluteFocus";

        if(p.Age > 60)
        {
            return "ForceMobiliteWageningen";
        }
        return p.Objective switch
        {
            TrainingObjective.Glutes => "GluteFocus",
            TrainingObjective.Calistenie => "Calisthenics",
            TrainingObjective.Strength => p.Level switch
            {
                UserLevel.Debutant => "Strength",
                UserLevel.Intermediaire => "StrengthInt",
                UserLevel.Avance => "StrengthAdv",
                _ => "Strength"
            },
            TrainingObjective.Hypertrophy => p.SeancesPerWeek switch
            {
                <= 3 => "TBT",
                4 => "PushPull4",
                _ => "Split5"
            },
            TrainingObjective.Fat_loss => "FatLoss",

            // TrainingObjective.Mobility => p.Level switch
            // {
            //     UserLevel.Avance => "MobilityAdv",
            //     UserLevel.Intermediaire => "MobilityInt",
            //     _ => "Mobility"
            // },
            // TrainingObjective.Yoga => p.Level switch
            // {
            //     UserLevel.Avance => "YogaAdv",
            //     UserLevel.Intermediaire => "YogaInt",
            //     _ => "Yoga"
            // },
            // TrainingObjective.Pilates => p.Level switch
            // {
            //     UserLevel.Avance => "PilatesAdv",
            //     UserLevel.Intermediaire => "PilatesInt",
            //     _ => "Pilates"
            // },
            _ => "TBT"
        };
    }
}
