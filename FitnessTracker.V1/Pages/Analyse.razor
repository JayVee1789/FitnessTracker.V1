@page "/analyse"
@using FitnessTracker.V1.Models
@using FitnessTracker.V1.Services
@using FitnessTracker.V1.Components
@using BlazorBootstrap
@inject PoidsService PoidsService
@inject ProgrammeService ProgService

<style>
    .thumb-container {
        display: inline-block;
        margin: 0.5rem;
        text-align: center
    }

    .thumb-placeholder {
        width: 200px;
        height: 120px;
        display: flex;
        align-items: center;
        justify-content: center;
        background: #f8f9fa;
        border: 1px solid #dee2e6;
        border-radius: 4px;
        cursor: pointer;
    }

    .thumb-label {
        margin-top: .25rem;
        font-size: .85rem;
        text-align: center
    }
</style>

<h3>Analyse des Performances</h3>

@if (analyse is null)
{
    <p>Chargement…</p>
}
else
{
    <div class="d-flex flex-wrap justify-content-center">
        <div class="thumb-container me-3 mb-3" @onclick="ShowLineModal">
            <div class="thumb-placeholder">
                <i class="bi bi-bar-chart-line" style="font-size:2rem;color:#6c757d"></i>
            </div>
            <div class="thumb-label">Progression du poids</div>
        </div>

        <div class="thumb-container me-3 mb-3" @onclick="ShowFreqModal">
            <div class="thumb-placeholder">
                <i class="bi bi-calendar-week" style="font-size:2rem;color:#6c757d"></i>
            </div>
            <div class="thumb-label">Séances / semaine</div>
        </div>

        <div class="thumb-container me-3 mb-3" @onclick="ShowRadarModal">
            <div class="thumb-placeholder">
                <i class="bi bi-graph-up-arrow" style="font-size:2rem;color:#6c757d"></i>
            </div>
            <div class="thumb-label">Radar</div>
        </div>

        <div class="thumb-container me-3 mb-3" @onclick="ShowBmiModal">
            <div class="thumb-placeholder">
                <i class="bi bi-activity" style="font-size:2rem;color:#6c757d"></i>
            </div>
            <div class="thumb-label">IMC</div>
        </div>

        <div class="thumb-container me-3 mb-3" @onclick="ShowProgModal">
            <div class="thumb-placeholder">
                <i class="bi bi-calendar3" style="font-size:2rem;color:#6c757d"></i>
            </div>
            <div class="thumb-label">Timeline</div>
        </div>

        <div class="thumb-container me-3 mb-3" @onclick="ShowPieModal">
            <div class="thumb-placeholder">
                <i class="bi bi-pie-chart" style="font-size:2rem;color:#6c757d"></i>
            </div>
            <div class="thumb-label">Muscles</div>
        </div>

        <div class="thumb-container mb-3" @onclick="ShowPrModal">
            <div class="thumb-placeholder">
                <i class="bi bi-trophy" style="font-size:2rem;color:#6c757d"></i>
            </div>
            <div class="thumb-label">Records</div>
        </div>
    </div>
}

@* ------------------------------------------------- *@
@*         LES MODALS AVEC OnShownAsync          *@
@* ------------------------------------------------- *@

<Modal @ref="lineModal" Size="ModalSize.Large" OnShownAsync="OnLineModalShown">
    <HeaderTemplate><h5>Progression du poids</h5></HeaderTemplate>
    <BodyTemplate>
        <GraphiqueLine @ref="largeLineChart"
                       Entries="entries"
                       Analyse="analyse"
                       Width="400" Height="400" />
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Secondary" @onclick="HideLineModal">Fermer</Button>
    </FooterTemplate>
</Modal>

<Modal @ref="freqModal" Size="ModalSize.Large" OnShownAsync="OnFreqModalShown">
    <HeaderTemplate><h5>Séances par semaine</h5></HeaderTemplate>
    <BodyTemplate>
        <WorkoutFrequencyBar @ref="largeFreqChart"
                             Entries="entries"
                             Width="400" Height="400" />
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Secondary" @onclick="HideFreqModal">Fermer</Button>
    </FooterTemplate>
</Modal>

<Modal @ref="radarModal" Size="ModalSize.Large" OnShownAsync="OnRadarModalShown">
    <HeaderTemplate><h5>Radar Forces/Faiblesses</h5></HeaderTemplate>
    <BodyTemplate>
        <StrengthRadar @ref="largeRadarChart"
                       Entries="entries"
                       Analyse="analyse"
                       Width="400" Height="400" />
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Secondary" @onclick="HideRadarModal">Fermer</Button>
    </FooterTemplate>
</Modal>

<Modal @ref="bmiModal" Size="ModalSize.Small" OnShownAsync="OnBmiModalShown">
    <HeaderTemplate><h5>Indice de Masse Corporelle</h5></HeaderTemplate>
    <BodyTemplate>
        <BmiGauge @ref="largeBmiGauge"
                  WeightKg="@(entries.LastOrDefault()?.Poids ?? 0)"
                  HeightCm="178"
                  Width="400" Height="400" />
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Secondary" @onclick="HideBmiModal">Fermer</Button>
    </FooterTemplate>
</Modal>

<Modal @ref="progModal" Size="ModalSize.Large" OnShownAsync="OnProgModalShown">
    <HeaderTemplate><h5>Timeline du programme</h5></HeaderTemplate>
    <BodyTemplate>
        @if (currentProg is not null)
        {
            <ProgrammeTimeline @ref="largeProgTimeline"
                               Programme="currentProg"
                               DurationWeeks="8"
                               Width="400"
                               Height="250" />
        }
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Secondary" @onclick="HideProgModal">Fermer</Button>
    </FooterTemplate>
</Modal>

<Modal @ref="pieModal" Size="ModalSize.Small" OnShownAsync="OnPieModalShown">
    <HeaderTemplate><h5>Répartition des muscles</h5></HeaderTemplate>
    <BodyTemplate>
        <MuscleSplitPie @ref="largePieChart"
                        Entries="entries"
                        Definitions="exerciseDefs" />
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Secondary" @onclick="HidePieModal">Fermer</Button>
    </FooterTemplate>
</Modal>

<Modal @ref="prModal" Size="ModalSize.Regular" OnShownAsync="OnPrModalShown">
    <HeaderTemplate><h5>Records personnels</h5></HeaderTemplate>
    <BodyTemplate>
        <PrTracker @ref="largePrChart"
                   Entries="entries"
                   Width="380" Height="400" />
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Secondary" @onclick="HidePrModal">Fermer</Button>
    </FooterTemplate>
</Modal>

@code {
    private List<PoidsEntry> entries = new();
    private PoidsAnalysisResult? analyse;
    private ProgrammeModel? currentProg;
    private List<ExerciseDefinition> exerciseDefs = new();

    private Modal lineModal, freqModal, radarModal,
                  bmiModal, progModal, pieModal, prModal;

    private GraphiqueLine largeLineChart;
    private WorkoutFrequencyBar largeFreqChart;
    private StrengthRadar largeRadarChart;
    private BmiGauge largeBmiGauge;
    private ProgrammeTimeline largeProgTimeline;
    private MuscleSplitPie largePieChart;
    private PrTracker largePrChart;

    protected override async Task OnInitializedAsync()
    {
        entries = await PoidsService.GetEntriesAsync();
        analyse = PoidsAnalyzer.Analyser(entries);
        currentProg = await ProgService.GetCurrentAsync();
        var defs = await ProgService.GetExerciseDefinitionsAsync();
        exerciseDefs = defs ?? new List<ExerciseDefinition>();
        Console.WriteLine($"[Analyse] exerciseDefs.Count = {exerciseDefs.Count}");
    }

    // ouverture / fermeture
    private Task ShowLineModal() => lineModal.ShowAsync();
    private Task HideLineModal() => lineModal.HideAsync();
    private Task ShowFreqModal() => freqModal.ShowAsync();
    private Task HideFreqModal() => freqModal.HideAsync();
    private Task ShowRadarModal() => radarModal.ShowAsync();
    private Task HideRadarModal() => radarModal.HideAsync();
    private Task ShowBmiModal() => bmiModal.ShowAsync();
    private Task HideBmiModal() => bmiModal.HideAsync();
    private Task ShowProgModal() => progModal.ShowAsync();
    private Task HideProgModal() => progModal.HideAsync();
    private Task ShowPieModal() => pieModal.ShowAsync();
    private Task HidePieModal() => pieModal.HideAsync();
    private Task ShowPrModal() => prModal.ShowAsync();
    private Task HidePrModal() => prModal.HideAsync();

    // rafraîchissement à l'ouverture
    private Task OnLineModalShown() => largeLineChart.RefreshAsync();
    private Task OnFreqModalShown() => largeFreqChart.RefreshAsync();
    private Task OnRadarModalShown() => largeRadarChart.RefreshAsync();
    private Task OnBmiModalShown() => largeBmiGauge.RefreshAsync();
    private Task OnProgModalShown() => largeProgTimeline.RefreshAsync();
    private Task OnPieModalShown() => largePieChart.RefreshAsync();
    private Task OnPrModalShown() => largePrChart.RefreshAsync();
}
