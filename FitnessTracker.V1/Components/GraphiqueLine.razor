@namespace FitnessTracker.V1.Components
@using System.Linq
@using BlazorBootstrap
@using FitnessTracker.V1.Models

<div class="container-fluid overflow-x-auto">
    
    <LineChart @ref="chart" Width="@Width" Height="@Height" />
    <div class="alert alert-info">
        Ce graphique affiche l'évolution des poids utilisés pour les exercices les plus fréquents ou les plus marquants.
        Chaque courbe représente un exercice distinct, et l'axe horizontal correspond aux dates d'entraînement.
        Cela permet de visualiser rapidement la progression ou les périodes sans enregistrement pour chaque exercice.
    </div>
</div>

@code {
    [Parameter] public List<PoidsEntry> Entries { get; set; } = new();
    [Parameter] public PoidsAnalysisResult? Analyse { get; set; }
    [Parameter] public int Width { get; set; } = 800;
    [Parameter] public int Height { get; set; } = 400;

    private LineChart? chart;
    private ChartData? data;
    private LineChartOptions? options;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender || chart is null || Entries.Count == 0)
            return;

        BuildChart();
        await chart.InitializeAsync(data!, options!);
    }

    private void BuildChart()
    {
        var jours = Entries
            .Select(e => e.Date.Date)
            .Distinct()
            .OrderBy(d => d)
            .Select(d => d.ToString("yyyy-MM-dd"))
            .ToList();

        var selection = (Analyse?.ExercicesFort ?? new())
            .Concat(Analyse?.ExercicesFaible ?? new())
            .Distinct()
            .Take(4)
            .ToList();

        if (selection.Count == 0)
        {
            selection = Entries.GroupBy(e => e.Exercice)
                .OrderByDescending(g => g.Count())
                .Take(4)
                .Select(g => g.Key)
                .ToList();
        }

        var datasets = new List<IChartDataset>();
        int idx = 0;
        foreach (var ex in selection)
        {
            // ✅ Correction : génération de List<double?> avec gestion de null
            List<double?> serie = jours
                .Select(label => Entries
                    .FirstOrDefault(e => e.Exercice == ex && e.Date.ToString("yyyy-MM-dd") == label)
                    ?.Poids)
                .ToList();

            var color = DuoColors(idx);
            idx++;

            datasets.Add(new LineChartDataset
                {
                    Label = ex,
                    Data = serie,
                    BackgroundColor = color,
                    BorderColor = color,
                    BorderWidth = 3,
                    BorderCapStyle = "round",
                    BorderJoinStyle = "round",
                    Tension = 0.4,
                    Fill = false,
                    SpanGaps = true
                });
        }

        data = new ChartData
            {
                Labels = jours,
                Datasets = datasets
            };

        options = new LineChartOptions
            {
                Responsive = true,
                MaintainAspectRatio = false,
                Plugins = new()
                {
                    Title = new() { Display = true, Text = "Progression du poids (kg)" }
                },
                Scales = new()
                {
                    X = new ChartAxes
                    {
                        Title = new ChartAxesTitle { Display = true, Text = "Date" }
                    },
                    Y = new ChartAxes
                    {
                        Title = new ChartAxesTitle { Display = true, Text = "Poids (kg)" }
                    }
                }
            };
    }

    private string DuoColors(int index)
    {
        string[] colors = new[]
        {
            "#1CB0F6", // bleu Duo
            "#FFD700", // jaune or
            "#00C48C", // vert vif
            "#FF6B6B", // rouge clair
            "#FFA500", // orange
            "#9C27B0"  // violet
        };
        return colors[index % colors.Length];
    }

    public async Task RefreshAsync()
    {
        if (chart is not null && data is not null && options is not null)
            await chart.InitializeAsync(data, options);
    }
}
