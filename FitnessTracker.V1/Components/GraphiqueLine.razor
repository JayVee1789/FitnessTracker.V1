@namespace FitnessTracker.V1.Components
@using System.Linq
@using FitnessTracker.V1.Models
@using BlazorBootstrap

<div class="container-fluid overflow-x-auto">
    <LineChart @ref="chart" Width="@Width" Height="@Height" />
</div>

@code {
    [Parameter] public List<PoidsEntry> Entries { get; set; } = new();
    [Parameter] public PoidsAnalysisResult? Analyse { get; set; }
    [Parameter] public int Width { get; set; } = 800;
    [Parameter] public int Height { get; set; } = 400;
    [Parameter] public bool ShowDemoButtons { get; set; } = true;

    private LineChart? chart;
    private ChartData? data;
    private LineChartOptions? options;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        // Ne tente l'init qu'une seule fois, et seulement si on a des données
        if (firstRender && chart is not null && Entries.Count > 0)
        {
            BuildChart();
            await chart.InitializeAsync(data!, options!);
        }
    }

    private void BuildChart()
    {
        // --- Prépare les labels et le dataset
        var jours = Entries.Select(e => e.Date.Date)
                           .Distinct()
                           .OrderBy(d => d)
                           .Select(d => d.ToString("yyyy-MM-dd"))
                           .ToList();

        var selection = (Analyse?.ExercicesFort ?? new())
            .Concat(Analyse?.ExercicesFaible ?? new())
            .Distinct()
            .Take(4)
            .ToList();
        if (selection.Count == 0)
            selection = Entries.Select(e => e.Exercice)
                               .Distinct()
                               .Take(4)
                               .ToList();

        var datasets = new List<IChartDataset>();
        int idx = 0;
        foreach (var ex in selection)
        {
            var serie = jours
                .Select(label => Entries
                    .FirstOrDefault(e => e.Exercice == ex
                                      && e.Date.ToString("yyyy-MM-dd") == label)
                    ?.Poids)
                .Cast<double?>()
                .ToList();

            var color = ColorUtility.CategoricalTwelveColors[
                idx % ColorUtility.CategoricalTwelveColors.Length];
            idx++;

            datasets.Add(new LineChartDataset
                {
                    Label = ex,
                    Data = serie,
                    BackgroundColor = color,
                    BorderColor = color,
                    BorderWidth = 2,
                    SpanGaps = true
                });
        }

        data = new ChartData
            {
                Labels = jours,
                Datasets = datasets
            };

        options = new LineChartOptions
            {
                Responsive = true,
                Interaction = new Interaction { Mode = InteractionMode.Index, Intersect = false },
                Plugins = new() { Title = new() { Display = true, Text = "Progression du poids (kg)" } },
                Scales = new()
                {
                    X = new ChartAxes { Title = new ChartAxesTitle { Display = true, Text = "Date" } },
                    Y = new ChartAxes { Title = new ChartAxesTitle { Display = true, Text = "Poids (kg)" } }
                }
            };
    }
}
