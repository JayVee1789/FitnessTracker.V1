@using System.Timers

<div class="chrono-container">
    <button class="chrono-start-btn" @onclick="StartChrono">⏱️ Start</button>
    <div class="chrono-time">@DisplayTime</div>
    <button class="chrono-stop-btn" @onclick="StopChrono">🛑 Stop</button>
</div>

@code {
    private Timer? _timer;
    private TimeSpan _elapsed = TimeSpan.Zero;
    private DateTime? _startTime;
    private bool _isRunning = false;

    public TimeSpan ElapsedTime => _elapsed;

    public void StopChronoFromParent()
    {
        if (_isRunning)
        {
            StopChrono();
            Console.WriteLine($"⏹️ Chronomètre stoppé via appel parent. Temps final: {_elapsed}");
        }
    }

    private string DisplayTime => _elapsed.ToString(@"hh\:mm\:ss");

    private void StartChrono()
    {
        if (_isRunning) return;
        _startTime = DateTime.UtcNow;
        _isRunning = true;

        _timer = new Timer(1000);
        _timer.Elapsed += (sender, args) =>
        {
            if (_startTime != null)
                _elapsed = DateTime.UtcNow - _startTime.Value;
            InvokeAsync(StateHasChanged);
        };
        _timer.Start();
    }

    private void StopChrono()
    {
        _timer?.Stop();
        _timer?.Dispose();
        _timer = null;
        _isRunning = false;
    }
}

<style>
    .chrono-container {
        display: flex;
        align-items: center;
        gap: 1rem;
    }

    .chrono-start-btn, .chrono-stop-btn {
        width: 100px;
        height: 100px;
        border-radius: 50%;
        font-size: 1.5rem;
        font-weight: bold;
        border: none;
        box-shadow: 0 6px 12px rgba(0,0,0,0.2);
        color: white;
    }

    .chrono-start-btn {
        background: linear-gradient(135deg, #ff6b35, #ff8c42);
    }

    .chrono-stop-btn {
        background: linear-gradient(135deg, #ff0000, #ff4d4d);
    }

    .chrono-time {
        font-size: 2rem;
        font-weight: bold;
        color: #2b2d42;
    }
</style>
