@namespace FitnessTracker.V1.Components
@using System.Linq
@using BlazorBootstrap
@using FitnessTracker.V1.Models

<div class="container-fluid overflow-x-auto">
    <div class="duo-card mb-3 p-3">
        <p class="duo-objectif">
            🏆 Ce graphique affiche vos meilleurs records sur les 10 exercices où vous avez levé le plus lourd.
            
        </p>
    </div>
    <BarChart @ref="chart" Width="@Width" Height="@Height" />
</div>

@code {
    [Parameter] public List<PoidsEntry> Entries { get; set; } = new();
    [Parameter] public int Width { get; set; } = 400;
    [Parameter] public int Height { get; set; } = 300;

    private BarChart? chart;
    private ChartData? chartData;
    private BarChartOptions? chartOptions;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender || chart is null || !Entries.Any()) return;

        BuildChart();
        await chart.InitializeAsync(chartData!, chartOptions!);
    }

    private void BuildChart()
    {
        var records = Entries
            .GroupBy(e => e.Exercice)
            .Select(g => new
            {
                Exercice = g.Key,
                Record = g.Max(e => e.Poids)
            })
            .OrderByDescending(x => x.Record)
            .Take(10)
            .ToList();

        var labels = records.Select(r => r.Exercice).ToList();
        var dataPoints = records.Select(r => (double?)r.Record).ToList();

        var colors = labels.Select((_, i) => DuoColors(i)).ToList();

        var dataset = new BarChartDataset
            {
                Label = "Record personnel",
                Data = dataPoints,
                BackgroundColor = colors,
                BorderColor = colors,
                BorderWidth = dataPoints.Select(_ => 2d).ToList()
            };

        chartData = new ChartData
            {
                Labels = labels,
                Datasets = new List<IChartDataset> { dataset }
            };

        chartOptions = new BarChartOptions
            {
                Responsive = true,
                MaintainAspectRatio = false,
                Plugins = new()
                {
                    Title = new()
                    {
                        Display = true,
                        Text = "Top 10 de vos records personnels 🏋️",
                        Color = "#1CB0F6",
                        Font = new ChartFont { Size = 20 }
                    }
                },
                Scales = new()
                {
                    X = new ChartAxes
                    {
                        Title = new ChartAxesTitle { Display = true, Text = "Exercice", Color = "#1CB0F6" }
                    },
                    Y = new ChartAxes
                    {
                        Title = new ChartAxesTitle { Display = true, Text = "Poids (kg)", Color = "#1CB0F6" }
                    }
                }
            };
    }

    private string DuoColors(int index)
    {
        string[] colors = new[]
        {
            "#1CB0F6", "#FFD700", "#00C48C", "#FF6B6B", "#FFA500", "#9C27B0",
            "#1CB0F6", "#FFD700", "#00C48C", "#FF6B6B"
        };
        return colors[index % colors.Length];
    }

    public async Task RefreshAsync()
    {
        if (chart is not null && chartData is not null && chartOptions is not null)
            await chart.InitializeAsync(chartData, chartOptions);
    }
}
