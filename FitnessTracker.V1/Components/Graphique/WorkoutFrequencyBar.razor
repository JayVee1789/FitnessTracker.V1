@namespace FitnessTracker.V1.Components
@using System.Globalization
@using System.Linq
@using BlazorBootstrap
@using FitnessTracker.V1.Models

<BarChart @ref="chart" Width="@Width" Height="@Height" />

@code {
    [Parameter] public List<PoidsEntry> Entries { get; set; } = new();
    [Parameter] public int Width { get; set; } = 700;
    [Parameter] public int Height { get; set; } = 350;

    private BarChart? chart;
    private ChartData? data;
    private BarChartOptions? options;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender || chart is null || Entries.Count == 0) return;

        // Grouper par semaine ISO-8601
        var weekly = Entries
            .GroupBy(e => ISOWeek.GetWeekOfYear(e.Date))
            .OrderBy(g => g.Key)
            .Select(g => new { Week = $"S{g.Key}", Count = g.Count() })
            .ToList();

        data = new ChartData
            {
                Labels = weekly.Select(w => w.Week).ToList(),
                Datasets = new()
            {
                new BarChartDataset
                {
                    Label = "Séances / semaine",
                    Data = weekly.Select(w => (double?)w.Count).ToList(),
                    BackgroundColor = weekly.Select(_ => "#4caf50").ToList()
                }
            }
            };

        options = new BarChartOptions
            {
                Responsive = true,
                MaintainAspectRatio = false,
                Plugins = new() { Title = new() { Display = true, Text = "Séances hebdomadaires" } }
            };

        await chart.InitializeAsync(data, options);
    }

    public async Task RefreshAsync()
    {
        if (chart is not null && data is not null && options is not null)
            await chart.InitializeAsync(data, options);
    }
}
