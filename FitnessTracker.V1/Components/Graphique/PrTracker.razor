@using BlazorBootstrap
@using FitnessTracker.V1.Models

<div class="chart-wrapper">
    <BarChart @ref="chart" class="chart-fullsize" />
</div>

@code {
    [Parameter] public List<PoidsEntry> Entries { get; set; } = new();

    private BarChart? chart;
    private ChartData? chartData;
    private BarChartOptions? chartOptions;

    protected override async Task OnParametersSetAsync()
    {
        Console.WriteLine($"🔄 PrTracker : OnParametersSetAsync entries={Entries?.Count}");

        if (chart != null && Entries.Any(e => e.Poids > 0))
        {
            BuildChart();
            await chart.InitializeAsync(chartData!, chartOptions!);
            Console.WriteLine("✅ Chart initialized with valid data");
        }
    }

    private void BuildChart()
    {
        var filteredEntries = Entries.Where(e => e.Poids > 0).ToList();

        var records = filteredEntries
            .GroupBy(e => e.Exercice)
            .Select(g => new
            {
                Exercice = g.Key,
                Record = g.Max(e => e.Poids)
            })
            .OrderByDescending(x => x.Record)
            .Take(10)
            .ToList();

        var labels = records.Select(r => r.Exercice).ToList();
        var dataPoints = records.Select(r => (double?)r.Record).ToList();
        var colors = labels.Select((_, i) => DuoColors(i)).ToList();

        chartData = new ChartData
            {
                Labels = labels,
                Datasets = new List<IChartDataset>
            {
                new BarChartDataset
                {
                    Label = "Records",
                    Data = dataPoints, // List<double?>
                    BackgroundColor = colors,
                    BorderColor = colors,
                    BorderWidth = dataPoints.Select(_ => 2d).ToList() // List<double>
                }
            }
            };


        var maxValue = records.Any() ? records.Max(r => r.Record) : 10;

        chartOptions = new BarChartOptions
            {
                Responsive = true,
                MaintainAspectRatio = false,
                Plugins = new()
                {
                    Title = new()
                    {
                        Display = true,
                        Text = "Top 10 Records",
                        Color = "#1CB0F6",
                        Font = new ChartFont { Size = 20 }
                    }
                },
                Scales = new()
                {
                    Y = new ChartAxes
                    {
                        BeginAtZero = true,
                        SuggestedMin = 0,
                        SuggestedMax = maxValue + 10,
                        Title = new ChartAxesTitle { Display = true, Text = "Poids (kg)", Color = "#1CB0F6" }
                    },
                    X = new ChartAxes
                    {
                        Type = "category",
                        Title = new ChartAxesTitle { Display = true, Text = "Exercice", Color = "#1CB0F6" }
                    }
                }
            };
    }

    private string DuoColors(int index)
    {
        string[] colors = new[] { "#1CB0F6", "#FFD700", "#00C48C", "#FF6B6B", "#FFA500", "#9C27B0" };
        return colors[index % colors.Length];
    }
}
