@namespace FitnessTracker.V1.Components
@using BlazorBootstrap

<DoughnutChart @ref="gauge" Width="300" Height="300" />

@code {
    [Parameter] public double WeightKg { get; set; }
    [Parameter] public double HeightCm { get; set; }
    // ← NOUVEAU : Width/Height paramétrables
    [Parameter] public int Width { get; set; } = 400;
    [Parameter] public int Height { get; set; } = 400;

    private DoughnutChart? gauge;
    private ChartData? data;
    private DoughnutChartOptions? options;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender || gauge is null || HeightCm <= 0)
            return;

        var bmi = WeightKg / Math.Pow(HeightCm / 100.0, 2);
        var capped = Math.Min(bmi, 40d);
        var remain = 40d - capped;

        data = new ChartData
            {
                Labels = new() { "IMC", "Reste" },
                Datasets = new()
            {
                new DoughnutChartDataset
                {
                    Data = new() { capped, remain },
                    BackgroundColor = new() { "#ff6384", "#e0e0e0" }
                }
            }
            };

        options = new DoughnutChartOptions
            {
                Responsive = true,
                MaintainAspectRatio = false
            };

        await gauge.InitializeAsync(data, options);
    }

    public async Task RefreshAsync()
    {
        if (gauge is not null && data is not null && options is not null)
            await gauge.InitializeAsync(data, options);
    }
}
