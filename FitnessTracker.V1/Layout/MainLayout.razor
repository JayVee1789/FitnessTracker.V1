@inherits LayoutComponentBase
@inject AuthService AuthService
@inject SupabaseService2 SupabaseService


@if (_updateAvailable)
{
    <div class="alert alert-warning text-center fixed-bottom m-0">
        🚀 Nouvelle version disponible !
        <button class="btn btn-sm btn-light ms-2" @onclick="ReloadApp">Mettre à jour</button>
    </div>
}

<div class="d-flex flex-column min-vh-100" style="background-color:#1CB0F6;">
    <!-- ░▒▓ BARRE DU HAUT ▓▒░ -->
    <nav class="navbar navbar-dark shadow-sm" style="background:#1CB0F6;border-bottom-left-radius: 14px;border-bottom-right-radius: 14px; --bs-navbar-padding-y:.4rem;">
        <div class="container-fluid">
            <span class="navbar-brand ms-2 fw-bold fs-4" style="color:white;">🏋️ FitnessTracker</span>
            <div class="ms-auto">
                @if (AuthService.IsAuthenticated)
                {
                    <a class="btn btn-light btn-sm" href="/logout" title="Se déconnecter">
                        <i class="bi bi-box-arrow-right"></i>
                    </a>
                }
                else
                {
                    <a class="btn btn-light btn-sm" href="/login" title="Se connecter">
                        <i class="bi bi-box-arrow-in-right"></i>
                    </a>
                }
            </div>
        </div>
    </nav>

    <div class="d-flex flex-grow-1" style="min-height:0;">
        <aside class="d-none d-md-flex flex-column bg-white border-end overflow-auto" style="width:260px;min-height:0;">
            <NavMenu CssClass="p-3" />
        </aside>
        <main class="app-main">
            @Body
        </main>
    </div>

    @if (AuthService.IsAuthenticated)
    {
        <nav class="bottom-nav d-md-none">
            <NavLink href="/view-session" class="bottom-item">
                <i class="bi bi-clipboard"></i>@* <span class="small">Entrainement</span> *@
            </NavLink>
            <NavLink href="/analyse" class="bottom-item">
                <i class="bi bi-graph-up fs-5"></i>@* <span class="small">Analyse</span> *@
            </NavLink>
            <NavLink href="/choix-programme" class="bottom-item">
                <i class="bi bi-calendar-week"></i>@* <span class="small">Auto</span> *@
            </NavLink>
            <NavLink href="/mon-profil" class="bottom-item">
                <i class="bi bi-person fs-5"></i>@* <span class="small">Profil</span> *@
            </NavLink>
            <NavLink href="/create-programme" class="bottom-item">
                <i class="bi bi-bricks"></i>@* <span class="small">Manuel</span> *@
            </NavLink>
            @* <NavLink href="/Roadmap" class="bottom-item">
                <i class="bi bi-cpu fs-5"></i><span class="small">Map</span>
            </NavLink> *@
        </nav>
    }
</div>

<!-- CE Modal sert de "container" aux modals lancés par ModalService -->
<Modal IsServiceModal="true" />

<!-- MENU LATÉRAL DUO -->
@code {
    [Parameter] public string? CssClass { get; set; }
    private string role = "user";


    protected override async Task OnInitializedAsync()
    {
        // 🔵 Essayer de restaurer la session
        var restored = await SupabaseService.LoadSessionAsync();

        if (restored)
        {
            Console.WriteLine("✅ Session restaurée automatiquement");
        }
        else
        {
            Console.WriteLine("❌ Pas de session trouvée, utilisateur déconnecté");
        }

        // 🟣 Ton rôle utilisateur ensuite
        role = await AuthService.GetCurrentUserRoleAsync();
    }
    [Inject] public IJSRuntime JS { get; set; } = default!;
    private bool _updateAvailable = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                _updateAvailable = await JS.InvokeAsync<bool>("pwaUpdate.checkForUpdate");
                StateHasChanged();
            }
            catch (Exception ex)
            {
                Console.WriteLine("❌ Erreur détection MAJ PWA : " + ex.Message);
            }
        }
    }

    private async Task ReloadApp()
    {
        await JS.InvokeVoidAsync("pwaUpdate.reload");
    }

}
